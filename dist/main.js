!function(t){var e={};function n(l){if(e[l])return e[l].exports;var g=e[l]={i:l,l:!1,exports:{}};return t[l].call(g.exports,g,g.exports,n),g.l=!0,g.exports}n.m=t,n.c=e,n.d=function(t,e,l){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:l})},n.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./src/styles/index.css\nvar styles = __webpack_require__(3);\n\n// CONCATENATED MODULE: ./src/asset_manager.js\n\n\n\nconst Assets = (function() {\n\n  let assets = {};\n\n  function loadAssets(assetOwners, callback) {\n    let tempAssetPaths = []\n    for (let assetOwner of assetOwners) {\n      tempAssetPaths = tempAssetPaths.concat(assetOwner.assetPaths);\n    }\n    let assetPaths = [... new Set(tempAssetPaths)];\n\n    let assetsRemaining = assetPaths.length;\n    for (let assetPath of assetPaths) {\n      let asset = new Image();\n      asset.onload = function() {\n        assets[assetPath] = asset;\n        assetsRemaining--;\n        if (assetsRemaining <= 0) {\n          for (let assetOwner of assetOwners) {\n            assetOwner.loadComplete();\n          }\n          callback();\n        }\n      };\n      asset.src = assetPath;\n    }\n  }\n\n  function get(assetPath) {\n    return assets[assetPath];\n  }\n\n  return {\n    loadAssets: loadAssets,\n    get: get\n  }\n\n})();\n\n// CONCATENATED MODULE: ./src/util.js\n\n\n\nconst tileImagePaths = [\n  './src/img/ground_tiles/brickpavers2.png',\n  './src/img/ground_tiles/concrete368a.png',\n  './src/img/ground_tiles/cretebrick970.png',\n  './src/img/ground_tiles/dirt.png',\n  './src/img/ground_tiles/dirtsand2.png',\n  './src/img/ground_tiles/rock.png',\n  './src/img/ground_tiles/snow.png',\n  './src/img/ground_tiles/stone.png'\n];\n\nconst mobileSpritePath = [\n  './src/img/mobiles/8way_mobile.png'\n]\n\nconst rand = (max) => {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\n// CONCATENATED MODULE: ./src/asset_owner.js\n\n\n\nclass AssetOwner {\n\n  constructor(assetPaths) {\n    this.assetPaths = assetPaths;\n  }\n\n}\n\n// CONCATENATED MODULE: ./src/map.js\n\n\n\n\n\n\n\nclass map_Map extends AssetOwner {\n\n  constructor(tileImagePaths, mapSize, tileWidth, tileHeight) {\n    super(tileImagePaths);\n    this.mapSize = mapSize;\n    this.tileWidth = tileWidth;\n    this.tileHeight = tileHeight;\n    this.mapDef = buildMapDef(this);\n  }\n\n  loadComplete() {\n    this.mapImage = drawMap(this);\n  }\n\n};\n\nfunction buildMapDef(map) {\n  let mapDef = [];\n  for (let i = 0; i < map.mapSize; i++) {\n    mapDef[i] = [];\n    for (let j = 0; j < map.mapSize; j++) {\n      mapDef[i][j] = map.assetPaths[rand(map.assetPaths.length)];\n    }\n  }\n  return mapDef;\n}\n\nfunction drawMap(map) {\n  let mapCanvas = document.createElement(\"canvas\");\n  mapCanvas.width = map.mapSize * map.tileWidth - map.mapSize;\n  mapCanvas.height = map.mapSize * map.tileHeight - map.mapSize;\n\n  for (let [x, row] of map.mapDef.entries()) {\n    for (let [y, tilePath] of row.entries()) {\n      drawTile(map, mapCanvas.getContext(\"2d\"), Assets.get(tilePath), x, y);\n    }\n  }\n  return mapCanvas;\n}\n\nfunction drawTile(map, context, img, mapX, mapY) {\n  let xOffset = ((map.mapSize * map.tileWidth) / 2) - (map.tileWidth / 2);\n  let contextX = ((mapX - mapY) * (map.tileWidth / 2)) - mapX + xOffset;\n  let contextY = (mapX + mapY) * (map.tileHeight / 2) - mapY;\n  context.drawImage(img, contextX, contextY, map.tileWidth, map.tileHeight);\n}\n\n// CONCATENATED MODULE: ./src/entity.js\n\n\n\n\n\n\nclass entity_Entity extends AssetOwner {\n\n  constructor(assetPaths) {\n    super(assetPaths);\n  }\n\n  loadComplete() {}\n\n  get image() {\n    return Assets.get(this.assetPaths[0]);\n  }\n\n}\n\n// CONCATENATED MODULE: ./src/keys.js\n\n\n\nconst Keys = (function() {\n\n  let keysDown = [];\n  let keysPressed = [];\n\n  function keyDown(keyCode) {\n    if (keysPressed.indexOf(keyCode) < 0) {\n      keysPressed.push(keyCode);\n    }\n    if (keysDown.indexOf(keyCode) < 0) {\n      keysDown.push(keyCode);\n    }\n  }\n\n  function keyUp(keyCode) {\n    keysDown = keysDown.filter( (element) => {\n      return element != keyCode;\n    });\n  }\n\n  function resetPresses() {\n    keysPressed = [];\n  }\n\n  function getKeysPressed() {\n    return keysDown.concat(keysPressed.filter( (key) => {\n      return keysDown.indexOf(key) < 0;\n    }));\n  }\n\n  return {\n    keyDown: keyDown,\n    keyUp: keyUp,\n    resetPresses: resetPresses,\n    getKeysPressed: getKeysPressed,\n  }\n\n})();\n\n// CONCATENATED MODULE: ./src/index.js\n\n\n\n\n\n\n\n\n\n\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n\n  console.log(\"Proxma Reverie approaches!\");\n\n  var viewport = document.getElementById('viewport-canvas');\n  var viewportContext = viewport.getContext('2d');\n  let viewportWidth = 600, viewportHeight = 400;\n  viewport.width = viewportWidth;\n  viewport.height = viewportHeight;\n\n  let tileWidth = 128, tileHeight = 64;\n\n  let mapSize = 10;\n\n  let viewOffsetLimitX = (mapSize * tileWidth) - viewportWidth - mapSize;\n  let viewOffsetLimitY = (mapSize * tileHeight) - viewportHeight - mapSize;\n\n  viewportContext.fillStyle = 'white';\n  viewportContext.fillRect(0, 0, viewportWidth, viewportHeight);\n\n  let map = new map_Map(tileImagePaths, mapSize, tileWidth, tileHeight);\n  let mobile = new entity_Entity(mobileSpritePath);\n\n  Assets.loadAssets([map, mobile], () => {\n\n    document.getElementById('loading-images-message').classList.add('hide');\n    document.getElementById('images-loaded-message').classList.remove('hide');\n\n    setTimeout(() => {\n      doTick(map);\n    }, 500);\n\n  });\n\n  let viewOffsetX = ((mapSize * tileWidth - mapSize) / 2) - (viewportWidth / 2);\n  let viewOffsetY = ((mapSize * tileHeight - mapSize) / 2) - (viewportHeight / 2);\n\n  let mobilePosX = viewportWidth / 2;\n  let mobilePosY = viewportHeight / 2;\n\n  function doTick(map) {\n    console.log('tick');\n    viewportContext.fillRect(0, 0, viewportWidth, viewportHeight);\n    viewportContext.drawImage(map.mapImage, viewOffsetX, viewOffsetY, viewportWidth, viewportHeight, 0, 0, viewportWidth, viewportHeight);\n\n    for (let keyCode of Keys.getKeysPressed()) {\n      console.log(Keys.getKeysPressed());\n      switch (keyCode) {\n        case \"ArrowLeft\":\n          mobilePosX = mobilePosX - 3;\n          break;\n        case \"ArrowRight\":\n          mobilePosX = mobilePosX + 3;\n          break;\n        case \"ArrowUp\":\n          mobilePosY = mobilePosY - 3;\n          break;\n        case \"ArrowDown\":\n          mobilePosY = mobilePosY + 3;\n          break;\n      }\n    }\n    Keys.resetPresses();\n\n    let mobileFrameWidth = 60;\n    let mobileFrameHeight = 110;\n    viewportContext.drawImage(mobile.image, 0, 0, mobileFrameWidth, mobileFrameHeight, mobilePosX, mobilePosY, mobileFrameWidth, mobileFrameHeight);\n\n    setTimeout(() => {\n      doTick(map);\n    }, 500);\n\n  }\n\n  document.addEventListener('keydown', (event) => {\n    Keys.keyDown(event.key);\n  });\n\n  document.addEventListener('keyup', (event) => {\n    Keys.keyUp(event.key);\n  });\n\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")},,,function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9zdHlsZXMvaW5kZXguY3NzPzU5ZDAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3\n")}]);