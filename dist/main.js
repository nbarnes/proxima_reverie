!function(n){var t={};function g(e){if(t[e])return t[e].exports;var I=t[e]={i:e,l:!1,exports:{}};return n[e].call(I.exports,I,I.exports,g),I.l=!0,I.exports}g.m=n,g.c=t,g.d=function(n,t,e){g.o(n,t)||Object.defineProperty(n,t,{configurable:!1,enumerable:!0,get:e})},g.r=function(n){Object.defineProperty(n,"__esModule",{value:!0})},g.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return g.d(t,"a",t),t},g.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},g.p="",g(g.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./src/styles/index.css\nvar styles = __webpack_require__(2);\n\n// CONCATENATED MODULE: ./src/input.js\n\n\nconst Input = (function() {\n  let keysDown = [];\n  let keysPressed = [];\n  let mouseEvent = undefined;\n\n  function keyDown(keyCode) {\n    if (keysPressed.indexOf(keyCode) < 0) {\n      keysPressed.push(keyCode);\n    }\n    if (keysDown.indexOf(keyCode) < 0) {\n      keysDown.push(keyCode);\n    }\n  }\n\n  function keyUp(keyCode) {\n    keysDown = keysDown.filter(element => {\n      return element != keyCode;\n    });\n  }\n\n  function getKeysPressed() {\n    return keysDown.concat(\n      keysPressed.filter(key => {\n        return keysDown.indexOf(key) < 0;\n      })\n    );\n  }\n\n  function mouseUp(event) {\n    mouseEvent = event;\n  }\n\n  function getMouseEvent() {\n    return mouseEvent;\n  }\n\n  function resetInputs() {\n    keysPressed = [];\n    mouseEvent = undefined;\n  }\n\n  return {\n    keyDown: keyDown,\n    keyUp: keyUp,\n    getKeysPressed: getKeysPressed,\n    mouseUp: mouseUp,\n    getMouseEvent: getMouseEvent,\n    resetInputs: resetInputs\n  };\n})();\n\n// CONCATENATED MODULE: ./src/asset_manager.js\n\n\nconst Assets = (function() {\n  let assets = {};\n\n  function loadAssets(assetOwners, callback) {\n    let tempAssetPaths = [];\n    for (let assetOwner of assetOwners) {\n      tempAssetPaths = tempAssetPaths.concat(assetOwner.assetPaths);\n    }\n    let assetPaths = [...new Set(tempAssetPaths)];\n\n    let assetsRemaining = assetPaths.length;\n    for (let assetPath of assetPaths) {\n      let asset = new Image();\n      asset.onload = function() {\n        assets[assetPath] = asset;\n        assetsRemaining--;\n        if (assetsRemaining <= 0) {\n          callback();\n        }\n      };\n      asset.src = assetPath;\n    }\n  }\n\n  function get(assetPath) {\n    return assets[assetPath];\n  }\n\n  return {\n    loadAssets: loadAssets,\n    get: get\n  };\n})();\n\n// CONCATENATED MODULE: ./src/asset_owner.js\n\n\n\nclass AssetOwner {\n\n  constructor(assetPaths) {\n    this.assetPaths = assetPaths;\n  }\n\n}\n\n// CONCATENATED MODULE: ./src/tile.js\n\n\n\n\n\nclass tile_Tile extends AssetOwner {\n  constructor(assetPaths) {\n    super(assetPaths);\n    this.tileWidth = 128;\n    this.tileHeight = 64;\n    this.imageFrameIndex = 0;\n  }\n\n  get img() {\n    return Assets.get(this.assetPaths[this.imageFrameIndex]);\n  }\n}\n\n// CONCATENATED MODULE: ./src/util.js\n\n\nconst rand = max => {\n  return Math.floor(Math.random() * Math.floor(max));\n};\n\nconst coordsEqual = (a, b) => {\n  if (a.x == undefined || b.x == undefined) {\n    console.log('Undefined value in util.coordsEqual');\n    console.log(`a.x: ${a.x} a.y: ${a.y} b.x: ${b.x} b.y: ${b.y}`);\n  }\n  // console.log('');\n  // console.log('in coordsEqual(a, b) =>');\n  // console.log(`a: ${a.constructor.name}`);\n  // console.log(`  x${a.x}, y${a.y}`);\n  // console.log(`a: ${b.constructor.name}`);\n  // console.log(`  x${b.x}, y${b.y}`);\n  // console.log('');\n  return a.x == b.x && a.y == b.y;\n};\n\nconst arrayIncludesCoords = (arr, coord_a) => {\n  return (\n    arr.filter(coord_b => {\n      return coordsEqual(coord_a, coord_b);\n    }).length > 0\n  );\n};\n\nconst entityMapLocationFromCell = (cell, map, frameOffsets) => {\n  // console.log('start entityMapLocationFromCell');\n  // console.log(cell);\n  let mapDestination = map.mapCoordsForCell({ x: cell.x, y: cell.y });\n  let tileOffset = map.tileOffsets;\n  let mapLocation = {\n    x: mapDestination.x + tileOffset.x - frameOffsets.x,\n    y: mapDestination.y + tileOffset.y - frameOffsets.y\n  };\n  // console.log(mapLocation);\n  return mapLocation;\n};\n\nconst Facing = {\n  SOUTHEAST: 7,\n  SOUTHWEST: 1,\n  NORTHWEST: 3,\n  NORTHEAST: 5\n};\n\n// CONCATENATED MODULE: ./src/cell.js\n\n\nclass Cell {\n  constructor(tile, map, coords) {\n    this.tile = tile;\n    this.map = map;\n    this.coords = coords;\n    this.contents = [];\n  }\n\n  get neighbors() {\n    return this.map.neighbors(this.coords);\n  }\n\n  get x() {\n    return this.coords.x;\n  }\n\n  get y() {\n    return this.coords.y;\n  }\n\n  addContents(entity) {\n    this.contents.push(entity);\n  }\n\n  removeContents(entity) {\n    this.contents = this.contents.filter(el => !(el == entity));\n  }\n\n  pathable() {\n    return this.contents.length == 0;\n  }\n}\n\n// CONCATENATED MODULE: ./src/map.js\n\n\n\n\n\nclass Map {\n  constructor(tiles, mapSize) {\n    this.tiles = tiles;\n    this.mapSize = mapSize;\n    this.tileWidth = tiles[0].tileWidth;\n    this.tileHeight = tiles[0].tileHeight;\n    this.cells = buildCells(this);\n  }\n\n  get mapCanvas() {\n    if (this.myMapCanvas == undefined) {\n      this.myMapCanvas = drawMapCanvas(this);\n    }\n    return this.myMapCanvas;\n  }\n\n  mapCoordsForCell(cellCoords) {\n    let xOffset = (this.mapSize * this.tileWidth) / 2 - this.tileWidth / 2;\n    let mapX = (cellCoords.x - cellCoords.y) * (this.tileWidth / 2) + xOffset;\n    let mapY = (cellCoords.x + cellCoords.y) * (this.tileHeight / 2);\n    return { x: mapX, y: mapY };\n  }\n\n  get tileOffsets() {\n    return { x: this.tileWidth / 2, y: this.tileHeight / 2 };\n  }\n\n  cellAt(coords) {\n    return this.cells[coords.x][coords.y];\n  }\n\n  neighbors(coords) {\n    let neighbors = [];\n    if (coords.x < this.mapSize - 1) {\n      neighbors.push(this.cells[coords.x + 1][coords.y]);\n    }\n    if (coords.x > 0) {\n      neighbors.push(this.cells[coords.x - 1][coords.y]);\n    }\n    if (coords.y < this.mapSize - 1) {\n      neighbors.push(this.cells[coords.x][coords.y + 1]);\n    }\n    if (coords.y > 0) {\n      neighbors.push(this.cells[coords.x][coords.y - 1]);\n    }\n    return neighbors;\n  }\n}\n\nfunction buildCells(map) {\n  let cells = [];\n  for (let i = 0; i < map.mapSize; i++) {\n    cells[i] = [];\n    for (let j = 0; j < map.mapSize; j++) {\n      cells[i][j] = new Cell(map.tiles[rand(map.tiles.length)], map, {\n        x: i,\n        y: j\n      });\n    }\n  }\n  return cells;\n}\n\nfunction drawMapCanvas(map) {\n  let mapCanvas = document.createElement('canvas');\n  mapCanvas.width = map.mapSize * map.tileWidth - map.mapSize;\n  mapCanvas.height = map.mapSize * map.tileHeight - map.mapSize;\n\n  for (let [x, row] of map.cells.entries()) {\n    for (let [y, cell] of row.entries()) {\n      drawTile(map, mapCanvas.getContext('2d'), cell.tile, x, y);\n    }\n  }\n  return mapCanvas;\n}\n\nfunction drawTile(map, context, tile, mapX, mapY) {\n  let contextCoords = map.mapCoordsForCell({ x: mapX, y: mapY });\n  context.drawImage(\n    tile.img,\n    contextCoords.x,\n    contextCoords.y,\n    map.tileWidth,\n    map.tileHeight\n  );\n}\n\n// CONCATENATED MODULE: ./src/entity.js\n\n\n\n\n\n\nclass entity_Entity extends AssetOwner {\n  constructor(entityDef, map, brain) {\n    super(entityDef.imagePaths);\n    this.frameSize = entityDef.frameSize;\n    this.frameOffsets = entityDef.frameOffsets || { x: 0, y: 0 };\n    this.map = map;\n    this.currentCell = this.map.cellAt(entityDef.startCell || { x: 0, y: 0 });\n    this.addToCell(this.currentCell);\n    this.myLocation = entityMapLocationFromCell(\n      this.currentCell,\n      this.map,\n      this.frameOffsets\n    );\n    this.cellPath = [];\n    this.brain = brain;\n    this.destination = undefined;\n    this.facing = entityDef.facing;\n  }\n\n  get image() {\n    return Assets.get(this.assetPaths[0]);\n  }\n\n  get location() {\n    // console.log(this.myLocation);\n    return this.myLocation;\n  }\n\n  set location(newLocation) {\n    let newFacing = undefined;\n    if (newLocation != undefined && this.myLocation != undefined) {\n      if (\n        newLocation.x >= this.myLocation.x &&\n        newLocation.y >= this.myLocation.y\n      ) {\n        newFacing = Facing.SOUTHEAST;\n      } else if (\n        newLocation.x >= this.myLocation.x &&\n        newLocation.y <= this.myLocation.y\n      ) {\n        newFacing = Facing.NORTHEAST;\n      } else if (\n        newLocation.x <= this.myLocation.x &&\n        newLocation.y <= this.myLocation.y\n      ) {\n        newFacing = Facing.NORTHWEST;\n      } else if (\n        newLocation.x <= this.myLocation.x &&\n        newLocation.y >= this.myLocation.y\n      ) {\n        newFacing = Facing.SOUTHWEST;\n      } else {\n        newFacing = Facing.NORTHEAST;\n      }\n    }\n    this.facing = newFacing;\n    this.myLocation = newLocation;\n  }\n\n  get frameXOrigin() {\n    if (this.facing != undefined) {\n      return this.facing * this.frameSize.width;\n    }\n    return 0;\n  }\n\n  get frameYOrigin() {\n    return 0;\n  }\n\n  respondToMouse(eventCell, blockingAnimationCallback) {\n    if (this.activity == undefined && this.brain != undefined) {\n      this.activity = this.brain.getActivity(\n        this,\n        eventCell,\n        blockingAnimationCallback\n      );\n    }\n  }\n\n  activityDone() {\n    this.activity = undefined;\n  }\n\n  moveBetweenCells(from, to) {\n    this.removeFromCell(from);\n    this.addToCell(to);\n  }\n\n  addToCell(cell) {\n    cell.addContents(this);\n    this.currentCell = cell;\n  }\n\n  removeFromCell(cell) {\n    cell.removeContents(this);\n    if (coordsEqual(this.currentCell, cell)) {\n      this.currentCell = undefined;\n    }\n  }\n\n  tick() {\n    if (this.activity != undefined) {\n      this.activity();\n    }\n  }\n}\n\n// CONCATENATED MODULE: ./src/binary_heap.js\n// Code for binary heap adapted from\n// http://eloquentjavascript.net/1st_edition/appendix2.html\n// by Marijn Haverbeke\n\n\n\nclass BinaryHeap {\n  constructor(scoreFunction, equalityFunction) {\n    this.scoreFunction = scoreFunction;\n    this.equalityFunction = equalityFunction;\n    this.elements = [];\n  }\n\n  first() {\n    return this.elements[0];\n  }\n\n  push(newElement) {\n    // Add the new element to the end of the array.\n    this.elements.push(newElement);\n    // Allow it to bubble up.\n    this.bubbleUp(this.elements.length - 1);\n  }\n\n  pop() {\n    // Store the first element so we can return it later.\n    let first = this.elements[0];\n    // Get the element at the end of the array.\n    let last = this.elements.pop();\n    // If there are any elements left, put the end element at the\n    // start, and let it sink down.\n    if (this.elements.length > 0) {\n      this.elements[0] = last;\n      this.sinkDown(0);\n    }\n    return first;\n  }\n\n  remove(targetElement) {\n    for (let [i, element] of this.elements.entries()) {\n      if (this.equalityFunction(targetElement, element)) {\n        let lastElement = this.elements.pop();\n        if (!(i == length - 1)) {\n          this.elements[i] = lastElement;\n          this.bubbleUp(i);\n          this.sinkDown(i);\n        }\n      }\n    }\n  }\n\n  size() {\n    return this.elements.length;\n  }\n\n  includes(targetElement) {\n    return this.elements.indexOf(targetElement) != -1;\n  }\n\n  bubbleUp(i) {\n    // Fetch the element that has to be moved.\n    let element = this.elements[i],\n      score = this.scoreFunction(element);\n    // When at 0, an element cannot go up any further.\n    while (i > 0) {\n      // Compute the parent element's index, and fetch it.\n      let parentI = Math.floor((i + 1) / 2) - 1,\n        parent = this.elements[parentI];\n      // If the parent has a lesser score, things are in order and we\n      // are done.\n      if (score >= this.scoreFunction(parent)) break;\n      // Otherwise, swap the parent with the current element and\n      // continue.\n      this.elements[parentI] = element;\n      this.elements[i] = parent;\n      i = parentI;\n    }\n  }\n\n  sinkDown(i) {\n    // Look up the target element and its score.\n    var length = this.elements.length,\n      element = this.elements[i],\n      score = this.scoreFunction(element);\n\n    while (true) {\n      // Compute the indices of the child elements.\n      var child2i = (i + 1) * 2,\n        child1i = child2i - 1;\n      // This is used to store the new position of the element,\n      // if any.\n      var swap = null;\n      // If the first child exists (is inside the array)...\n      if (child1i < length) {\n        // Look it up and compute its score.\n        var child1 = this.elements[child1i],\n          child1Score = this.scoreFunction(child1);\n        // If the score is less than our element's, we need to swap.\n        if (child1Score < score) swap = child1i;\n      }\n      // Do the same checks for the other child.\n      if (child2i < length) {\n        var child2 = this.elements[child2i],\n          child2Score = this.scoreFunction(child2);\n        if (child2Score < (swap == null ? score : child1Score)) swap = child2i;\n      }\n\n      // No need to swap further, we are done.\n      if (swap == null) break;\n\n      // Otherwise, swap and continue.\n      this.elements[i] = this.elements[swap];\n      this.elements[swap] = element;\n      i = swap;\n    }\n  }\n}\n\n// CONCATENATED MODULE: ./src/brain.js\n\n\n\n\n\nclass brain_MobileBrain {\n  getActivity(entity, eventCell, blockingAnimationCallback) {\n    let start = entity.currentCell;\n    let end = eventCell;\n    let path = buildPathAStar(start, end);\n    let destination = undefined;\n    blockingAnimationCallback(true);\n    return () => {\n      if (destination != undefined) {\n        let nextPosition = getNextMapPosition(entity, destination);\n        entity.location = nextPosition;\n        if (coordsEqual(entity.location, destination)) {\n          destination = undefined;\n        }\n      } else if (path.length > 0) {\n        entity.moveBetweenCells(entity.currentCell, path[0]);\n        destination = getDestination(entity, path);\n      } else {\n        entity.activityDone();\n        blockingAnimationCallback(false);\n      }\n    };\n  }\n}\n\nfunction getNextMapPosition(entity, destination) {\n  let currentLoc = { x: entity.location.x, y: entity.location.y };\n  let dx = currentLoc.x - destination.x,\n    dy = currentLoc.y - destination.y;\n  let dist = Math.sqrt(dx * dx + dy * dy);\n  let velX = (dx / dist) * 5;\n  let velY = (dy / dist) * 5;\n  if (Math.abs(dx) < Math.abs(velX)) {\n    velX = dx;\n  }\n  if (Math.abs(dy) < Math.abs(velY)) {\n    velY = dy;\n  }\n  return {\n    x: (currentLoc.x -= velX),\n    y: (currentLoc.y -= velY)\n  };\n}\n\nfunction getDestination(entity, cellPath) {\n  let nextCellDestination = cellPath.shift();\n  let nextDestination = undefined;\n  if (nextCellDestination != undefined) {\n    nextDestination = entityMapLocationFromCell(\n      nextCellDestination,\n      entity.map,\n      entity.frameOffsets\n    );\n  }\n  return nextDestination;\n}\n\n// Uses Brensenham's line algorithm\nfunction buildPath(start, end) {\n  let path = [];\n\n  let currentX = start.x,\n    currentY = start.y;\n  let deltaX = Math.abs(end.x - start.x),\n    deltaY = Math.abs(end.y - start.y);\n  let slopeX = start.x < end.x ? 1 : -1,\n    slopeY = start.y < end.y ? 1 : -1;\n  let err = deltaX - deltaY;\n\n  while (currentX != end.x || currentY != end.y) {\n    let err2 = 2 * err;\n    if (err2 > deltaY * -1) {\n      err -= deltaY;\n      currentX += slopeX;\n    } else if (err2 < deltaX) {\n      err += deltaX;\n      currentY += slopeY;\n    }\n    path.push({ x: currentX, y: currentY });\n  }\n  return path;\n}\n\nfunction buildPathAStar(start, end) {\n  let open = new BinaryHeap(\n    a => {\n      return a.f;\n    },\n    (a, b) => {\n      return coordsEqual(a, b);\n    }\n  );\n  open.push(new GraphNode(start));\n  let closed = [];\n  while (open.size() > 0) {\n    let currentNode = open.pop();\n    closed.push(currentNode);\n    if (coordsEqual(currentNode, end)) {\n      return buildPath(currentNode);\n    }\n    let neighbors = currentNode.neighbors;\n    for (let neighbor of neighbors) {\n      if (neighbor.pathable()) {\n        let g = currentNode.g + 1;\n        let f = g + manhattenDistance(neighbor, end);\n        if (!arrayIncludesCoords(closed, neighbor)) {\n          if (!open.includes(neighbor)) {\n            neighbor.parent = currentNode;\n            neighbor.f = f;\n            open.push(neighbor);\n          }\n        } else if (neighbor.g >= g) {\n          closed = closed.filter(el => !coordsEqual(el, neighbor));\n          neighbor.parent = currentNode;\n          neighbor.f = f;\n          open.push(nieghbor);\n        }\n      } else if (!arrayIncludesCoords(closed, neighbor)) {\n        closed.push(neighbor);\n      }\n    }\n  }\n  return []; // no path found\n}\n\nfunction buildPath(endNode) {\n  let path = [];\n  while (endNode.parent) {\n    path.push(endNode.cell);\n    endNode = endNode.parent;\n  }\n  return path.reverse();\n}\n\nfunction manhattenDistance(start, end) {\n  return Math.abs(start.x - end.x) + Math.abs(start.y - end.y);\n}\n\nclass GraphNode {\n  constructor(cell) {\n    this.cell = cell;\n    this.f = 0;\n  }\n  get neighbors() {\n    if (this.myNeighbors == undefined) {\n      return this.cell.neighbors.map(neighbor => {\n        return new GraphNode(neighbor);\n      });\n    }\n    return this.myNeighbors;\n  }\n  set g(newG) {\n    /* no op, g is computed from parent.g */\n  }\n  get g() {\n    return this.parent != undefined ? this.parent.g + 1 : 0;\n  }\n  get coords() {\n    return this.cell.coords;\n  }\n  get x() {\n    return this.cell.coords.x;\n  }\n  get y() {\n    return this.cell.coords.y;\n  }\n  pathable() {\n    return this.cell.pathable();\n  }\n}\n\n// CONCATENATED MODULE: ./src/scene.js\n\n\n\n\n\n\n\n\n\nclass scene_Scene {\n  constructor(sceneDef, viewport, viewportDimensions, loadCompleteCallback) {\n    let tiles = sceneDef.mapDef.tileImagePaths.map(tileImagePath => {\n      return new tile_Tile([tileImagePath]);\n    });\n\n    this.map = new Map(tiles, sceneDef.mapDef.mapSize);\n\n    this.mobiles = sceneDef.mobileDefs.map(mobileDef => {\n      return new entity_Entity(mobileDef, this.map, new brain_MobileBrain());\n    });\n    this.activeMobile = this.mobiles[0];\n    this.props = sceneDef.propDefs.map(propDef => {\n      return new entity_Entity(propDef, this.map);\n    });\n\n    this.viewport = viewport;\n    this.viewportDimensions = viewportDimensions;\n\n    Assets.loadAssets([...tiles, ...this.mobiles, ...this.props], () => {\n      this.viewportOffsetDimensions = {\n        x: this.map.mapCanvas.width / 2 - viewportDimensions.x / 2,\n        y: this.map.mapCanvas.height / 2 - viewportDimensions.y / 2\n      };\n      loadCompleteCallback();\n    });\n\n    this.waitingOnAnimation = false;\n  }\n\n  tick() {\n    let mouseEvent = Input.getMouseEvent();\n    if (mouseEvent != undefined) {\n      let eventViewportPosition = getEventViewportPosition(\n        this.viewport,\n        mouseEvent\n      );\n      let eventMapPosition = getCursorMapPosition(\n        this.viewportOffsetDimensions,\n        eventViewportPosition\n      );\n      let cellPosition = getCursorCellPosition(this.map, eventMapPosition);\n\n      if (!this.waitingOnAnimation) {\n        this.activeMobile.respondToMouse(\n          this.map.cellAt(cellPosition),\n          shouldWait => {\n            this.waitingOnAnimation = shouldWait;\n          }\n        );\n\n        if (this.mobiles.slice(-1)[0] == this.activeMobile) {\n          this.activeMobile = this.mobiles[0];\n        } else {\n          this.activeMobile = this.mobiles[\n            this.mobiles.indexOf(this.activeMobile) + 1\n          ];\n        }\n      }\n    }\n\n    this.mobiles.forEach(mobile => {\n      mobile.tick();\n    });\n    this.props.forEach(prop => {\n      prop.tick();\n    });\n\n    let context = this.viewport.getContext('2d');\n    context.clearRect(\n      0,\n      0,\n      this.viewportDimensions.x,\n      this.viewportDimensions.y\n    );\n    context.drawImage(\n      this.map.mapCanvas,\n      this.viewportOffsetDimensions.x,\n      this.viewportOffsetDimensions.y,\n      this.viewportDimensions.x,\n      this.viewportDimensions.y,\n      0,\n      0,\n      this.viewportDimensions.x,\n      this.viewportDimensions.y\n    );\n\n    this.mobiles.forEach(mobile => {\n      context.drawImage(\n        mobile.image,\n        mobile.frameXOrigin,\n        mobile.frameYOrigin,\n        mobile.frameSize.width,\n        mobile.frameSize.height,\n        mobile.location.x - this.viewportOffsetDimensions.x,\n        mobile.location.y - this.viewportOffsetDimensions.y,\n        mobile.frameSize.width,\n        mobile.frameSize.height\n      );\n    });\n\n    this.props.forEach(prop => {\n      context.drawImage(\n        prop.image,\n        prop.frameXOrigin,\n        prop.frameYOrigin,\n        prop.frameSize.width,\n        prop.frameSize.height,\n        prop.location.x - this.viewportOffsetDimensions.x,\n        prop.location.y - this.viewportOffsetDimensions.y,\n        prop.frameSize.width,\n        prop.frameSize.height\n      );\n    });\n\n    Input.resetInputs();\n  }\n}\n\nfunction getCursorMapPosition(viewOffsets, position) {\n  return { x: viewOffsets.x + position.x, y: viewOffsets.y + position.y };\n}\n\nfunction getCursorCellPosition(map, position) {\n  let halfTileWidth = map.tileWidth / 2;\n  let halfTileHeight = map.tileHeight / 2;\n  let halfMapSize = map.mapSize / 2;\n  let cellX =\n    (position.x / halfTileWidth + position.y / halfTileHeight) / 2 -\n    halfMapSize;\n  let cellY =\n    (position.y / halfTileHeight - position.x / halfTileWidth) / 2 +\n    halfMapSize;\n  return { x: Math.floor(cellX), y: Math.floor(cellY) };\n}\n\nfunction getEventViewportPosition(viewport, event) {\n  let rect = viewport.getBoundingClientRect();\n  let x = event.clientX - rect.left;\n  let y = event.clientY - rect.top;\n  return { x: x, y: y };\n}\n\n// CONCATENATED MODULE: ./src/scene_definition.js\n\n\nconst scene_definition_sceneDef = {\n  mapDef: {\n    mapSize: 10,\n    tileImagePaths: [\n      './src/img/ground_tiles/brickpavers2.png',\n      './src/img/ground_tiles/concrete368a.png',\n      './src/img/ground_tiles/cretebrick970.png',\n      './src/img/ground_tiles/dirt.png',\n      './src/img/ground_tiles/dirtsand2.png',\n      './src/img/ground_tiles/rock.png',\n      './src/img/ground_tiles/snow.png',\n      './src/img/ground_tiles/stone.png'\n    ]\n  },\n  mobileDefs: [\n    {\n      imagePaths: ['./src/img/mobiles/8way_mobile.png'],\n      startCell: { x: 3, y: 3 },\n      frameSize: { width: 60, height: 110 },\n      frameOffsets: { x: 30, y: 100 }\n    },\n    {\n      imagePaths: ['./src/img/mobiles/8way_mobile.png'],\n      startCell: { x: 5, y: 4 },\n      frameSize: { width: 60, height: 110 },\n      frameOffsets: { x: 30, y: 100 }\n    },\n    {\n      imagePaths: ['./src/img/mobiles/8way_mobile.png'],\n      startCell: { x: 3, y: 6 },\n      frameSize: { width: 60, height: 110 },\n      frameOffsets: { x: 30, y: 100 }\n    }\n  ],\n  propDefs: [\n    {\n      imagePaths: ['./src/img/props/statue1-01.png'],\n      startCell: { x: 5, y: 5 },\n      frameSize: { width: 128, height: 128 },\n      frameOffsets: { x: 64, y: 112 }\n    },\n    {\n      imagePaths: ['./src/img/props/statue1-02.png'],\n      startCell: { x: 0, y: 3 },\n      frameSize: { width: 128, height: 128 },\n      frameOffsets: { x: 64, y: 112 }\n    },\n    {\n      imagePaths: ['./src/img/props/statue1-03.png'],\n      startCell: { x: 4, y: 1 },\n      frameSize: { width: 128, height: 128 },\n      frameOffsets: { x: 64, y: 112 }\n    },\n    {\n      imagePaths: ['./src/img/props/statue1-04.png'],\n      startCell: { x: 5, y: 1 },\n      frameSize: { width: 128, height: 128 },\n      frameOffsets: { x: 64, y: 112 }\n    },\n    {\n      imagePaths: ['./src/img/props/statue1-02.png'],\n      startCell: { x: 6, y: 0 },\n      frameSize: { width: 128, height: 128 },\n      frameOffsets: { x: 64, y: 112 }\n    },\n    {\n      imagePaths: ['./src/img/props/statue1-03.png'],\n      startCell: { x: 7, y: 9 },\n      frameSize: { width: 128, height: 128 },\n      frameOffsets: { x: 64, y: 112 }\n    }\n  ]\n};\n\n// CONCATENATED MODULE: ./src/index.js\n\n\n\n\n\n\n\n\n\ndocument.addEventListener('DOMContentLoaded', function() {\n  console.log('Proxma Reverie approaches!');\n\n  // console.log('testing BinaryHeap');\n  // let heap = new BinaryHeap(\n  //   el => {\n  //     return el;\n  //   },\n  //   (a, b) => {\n  //     return a == b;\n  //   }\n  // );\n  // for (let entry of [10, 3, 4, 8, 2, 9, 7, 1, 2, 6, 5]) {\n  //   heap.push(entry);\n  // }\n  // heap.remove(2);\n  // while (heap.size() > 0) {\n  //   console.log(heap.pop());\n  // }\n\n  let tickLength = 50;\n\n  var viewport = document.getElementById('viewport-canvas');\n  let viewportDimensions = { x: 600, y: 400 };\n  viewport.width = viewportDimensions.x;\n  viewport.height = viewportDimensions.y;\n\n  let scene = new scene_Scene(scene_definition_sceneDef, viewport, viewportDimensions, () => {\n    setTimeout(() => {\n      tick();\n    }, 0);\n  });\n\n  function tick() {\n    scene.tick();\n    setTimeout(() => {\n      tick();\n    }, tickLength);\n  }\n\n  document.addEventListener('keydown', event => {\n    Input.keyDown(event.key);\n  });\n\n  document.addEventListener('keyup', event => {\n    Input.keyUp(event.key);\n  });\n\n  viewport.addEventListener('mouseup', event => {\n    Input.mouseUp(event);\n  });\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")},,function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9zdHlsZXMvaW5kZXguY3NzPzU5ZDAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n")}]);