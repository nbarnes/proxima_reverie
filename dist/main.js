!function(n){var t={};function e(g){if(t[g])return t[g].exports;var I=t[g]={i:g,l:!1,exports:{}};return n[g].call(I.exports,I,I.exports,e),I.l=!0,I.exports}e.m=n,e.c=t,e.d=function(n,t,g){e.o(n,t)||Object.defineProperty(n,t,{enumerable:!0,get:g})},e.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},e.t=function(n,t){if(1&t&&(n=e(n)),8&t)return n;if(4&t&&"object"==typeof n&&n&&n.__esModule)return n;var g=Object.create(null);if(e.r(g),Object.defineProperty(g,"default",{enumerable:!0,value:n}),2&t&&"string"!=typeof n)for(var I in n)e.d(g,I,function(t){return n[t]}.bind(null,I));return g},e.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return e.d(t,"a",t),t},e.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},e.p="",e(e.s=11)}([function(module,exports,__webpack_require__){eval("/**\n * Simple binary search tree\n */\nvar customUtils = __webpack_require__(1);\n\n\n/**\n * Constructor\n * @param {Object} options Optional\n * @param {Boolean}  options.unique Whether to enforce a 'unique' constraint on the key or not\n * @param {Key}      options.key Initialize this BST's key with key\n * @param {Value}    options.value Initialize this BST's data with [value]\n * @param {Function} options.compareKeys Initialize this BST's compareKeys\n */\nfunction BinarySearchTree (options) {\n  options = options || {};\n\n  this.left = null;\n  this.right = null;\n  this.parent = options.parent !== undefined ? options.parent : null;\n  if (options.hasOwnProperty('key')) { this.key = options.key; }\n  this.data = options.hasOwnProperty('value') ? [options.value] : [];\n  this.unique = options.unique || false;\n\n  this.compareKeys = options.compareKeys || customUtils.defaultCompareKeysFunction;\n  this.checkValueEquality = options.checkValueEquality || customUtils.defaultCheckValueEquality;\n}\n\n\n// ================================\n// Methods used to test the tree\n// ================================\n\n\n/**\n * Get the descendant with max key\n */\nBinarySearchTree.prototype.getMaxKeyDescendant = function () {\n  if (this.right) {\n    return this.right.getMaxKeyDescendant();\n  } else {\n    return this;\n  }\n};\n\n\n/**\n * Get the maximum key\n */\nBinarySearchTree.prototype.getMaxKey = function () {\n  return this.getMaxKeyDescendant().key;\n};\n\n\n/**\n * Get the descendant with min key\n */\nBinarySearchTree.prototype.getMinKeyDescendant = function () {\n  if (this.left) {\n    return this.left.getMinKeyDescendant()\n  } else {\n    return this;\n  }\n};\n\n\n/**\n * Get the minimum key\n */\nBinarySearchTree.prototype.getMinKey = function () {\n  return this.getMinKeyDescendant().key;\n};\n\n\n/**\n * Check that all nodes (incl. leaves) fullfil condition given by fn\n * test is a function passed every (key, data) and which throws if the condition is not met\n */\nBinarySearchTree.prototype.checkAllNodesFullfillCondition = function (test) {\n  if (!this.hasOwnProperty('key')) { return; }\n\n  test(this.key, this.data);\n  if (this.left) { this.left.checkAllNodesFullfillCondition(test); }\n  if (this.right) { this.right.checkAllNodesFullfillCondition(test); }\n};\n\n\n/**\n * Check that the core BST properties on node ordering are verified\n * Throw if they aren't\n */\nBinarySearchTree.prototype.checkNodeOrdering = function () {\n  var self = this;\n\n  if (!this.hasOwnProperty('key')) { return; }\n\n  if (this.left) {\n    this.left.checkAllNodesFullfillCondition(function (k) {\n      if (self.compareKeys(k, self.key) >= 0) {\n        throw new Error('Tree with root ' + self.key + ' is not a binary search tree');\n      }\n    });\n    this.left.checkNodeOrdering();\n  }\n\n  if (this.right) {\n    this.right.checkAllNodesFullfillCondition(function (k) {\n      if (self.compareKeys(k, self.key) <= 0) {\n        throw new Error('Tree with root ' + self.key + ' is not a binary search tree');\n      }\n    });\n    this.right.checkNodeOrdering();\n  }\n};\n\n\n/**\n * Check that all pointers are coherent in this tree\n */\nBinarySearchTree.prototype.checkInternalPointers = function () {\n  if (this.left) {\n    if (this.left.parent !== this) { throw new Error('Parent pointer broken for key ' + this.key); }\n    this.left.checkInternalPointers();\n  }\n\n  if (this.right) {\n    if (this.right.parent !== this) { throw new Error('Parent pointer broken for key ' + this.key); }\n    this.right.checkInternalPointers();\n  }\n};\n\n\n/**\n * Check that a tree is a BST as defined here (node ordering and pointer references)\n */\nBinarySearchTree.prototype.checkIsBST = function () {\n  this.checkNodeOrdering();\n  this.checkInternalPointers();\n  if (this.parent) { throw new Error(\"The root shouldn't have a parent\"); }\n};\n\n\n/**\n * Get number of keys inserted\n */\nBinarySearchTree.prototype.getNumberOfKeys = function () {\n  var res;\n\n  if (!this.hasOwnProperty('key')) { return 0; }\n\n  res = 1;\n  if (this.left) { res += this.left.getNumberOfKeys(); }\n  if (this.right) { res += this.right.getNumberOfKeys(); }\n\n  return res;\n};\n\n\n\n// ============================================\n// Methods used to actually work on the tree\n// ============================================\n\n/**\n * Create a BST similar (i.e. same options except for key and value) to the current one\n * Use the same constructor (i.e. BinarySearchTree, AVLTree etc)\n * @param {Object} options see constructor\n */\nBinarySearchTree.prototype.createSimilar = function (options) {\n  options = options || {};\n  options.unique = this.unique;\n  options.compareKeys = this.compareKeys;\n  options.checkValueEquality = this.checkValueEquality;\n\n  return new this.constructor(options);\n};\n\n\n/**\n * Create the left child of this BST and return it\n */\nBinarySearchTree.prototype.createLeftChild = function (options) {\n  var leftChild = this.createSimilar(options);\n  leftChild.parent = this;\n  this.left = leftChild;\n\n  return leftChild;\n};\n\n\n/**\n * Create the right child of this BST and return it\n */\nBinarySearchTree.prototype.createRightChild = function (options) {\n  var rightChild = this.createSimilar(options);\n  rightChild.parent = this;\n  this.right = rightChild;\n\n  return rightChild;\n};\n\n\n/**\n * Insert a new element\n */\nBinarySearchTree.prototype.insert = function (key, value) {\n  // Empty tree, insert as root\n  if (!this.hasOwnProperty('key')) {\n    this.key = key;\n    this.data.push(value);\n    return;\n  }\n\n  // Same key as root\n  if (this.compareKeys(this.key, key) === 0) {\n    if (this.unique) {\n      var err = new Error(\"Can't insert key \" + key + \", it violates the unique constraint\");\n      err.key = key;\n      err.errorType = 'uniqueViolated';\n      throw err;\n    } else {\n      this.data.push(value);\n    }\n    return;\n  }\n\n  if (this.compareKeys(key, this.key) < 0) {\n    // Insert in left subtree\n    if (this.left) {\n      this.left.insert(key, value);\n    } else {\n      this.createLeftChild({ key: key, value: value });\n    }\n  } else {\n    // Insert in right subtree\n    if (this.right) {\n      this.right.insert(key, value);\n    } else {\n      this.createRightChild({ key: key, value: value });\n    }\n  }\n};\n\n\n/**\n * Search for all data corresponding to a key\n */\nBinarySearchTree.prototype.search = function (key) {\n  if (!this.hasOwnProperty('key')) { return []; }\n\n  if (this.compareKeys(this.key, key) === 0) { return this.data; }\n\n  if (this.compareKeys(key, this.key) < 0) {\n    if (this.left) {\n      return this.left.search(key);\n    } else {\n      return [];\n    }\n  } else {\n    if (this.right) {\n      return this.right.search(key);\n    } else {\n      return [];\n    }\n  }\n};\n\n\n/**\n * Return a function that tells whether a given key matches a lower bound\n */\nBinarySearchTree.prototype.getLowerBoundMatcher = function (query) {\n  var self = this;\n\n  // No lower bound\n  if (!query.hasOwnProperty('$gt') && !query.hasOwnProperty('$gte')) {\n    return function () { return true; };\n  }\n\n  if (query.hasOwnProperty('$gt') && query.hasOwnProperty('$gte')) {\n    if (self.compareKeys(query.$gte, query.$gt) === 0) {\n      return function (key) { return self.compareKeys(key, query.$gt) > 0; };\n    }\n\n    if (self.compareKeys(query.$gte, query.$gt) > 0) {\n      return function (key) { return self.compareKeys(key, query.$gte) >= 0; };\n    } else {\n      return function (key) { return self.compareKeys(key, query.$gt) > 0; };\n    }\n  }\n\n  if (query.hasOwnProperty('$gt')) {\n    return function (key) { return self.compareKeys(key, query.$gt) > 0; };\n  } else {\n    return function (key) { return self.compareKeys(key, query.$gte) >= 0; };\n  }\n};\n\n\n/**\n * Return a function that tells whether a given key matches an upper bound\n */\nBinarySearchTree.prototype.getUpperBoundMatcher = function (query) {\n  var self = this;\n\n  // No lower bound\n  if (!query.hasOwnProperty('$lt') && !query.hasOwnProperty('$lte')) {\n    return function () { return true; };\n  }\n\n  if (query.hasOwnProperty('$lt') && query.hasOwnProperty('$lte')) {\n    if (self.compareKeys(query.$lte, query.$lt) === 0) {\n      return function (key) { return self.compareKeys(key, query.$lt) < 0; };\n    }\n\n    if (self.compareKeys(query.$lte, query.$lt) < 0) {\n      return function (key) { return self.compareKeys(key, query.$lte) <= 0; };\n    } else {\n      return function (key) { return self.compareKeys(key, query.$lt) < 0; };\n    }\n  }\n\n  if (query.hasOwnProperty('$lt')) {\n    return function (key) { return self.compareKeys(key, query.$lt) < 0; };\n  } else {\n    return function (key) { return self.compareKeys(key, query.$lte) <= 0; };\n  }\n};\n\n\n// Append all elements in toAppend to array\nfunction append (array, toAppend) {\n  var i;\n\n  for (i = 0; i < toAppend.length; i += 1) {\n    array.push(toAppend[i]);\n  }\n}\n\n\n/**\n * Get all data for a key between bounds\n * Return it in key order\n * @param {Object} query Mongo-style query where keys are $lt, $lte, $gt or $gte (other keys are not considered)\n * @param {Functions} lbm/ubm matching functions calculated at the first recursive step\n */\nBinarySearchTree.prototype.betweenBounds = function (query, lbm, ubm) {\n  var res = [];\n\n  if (!this.hasOwnProperty('key')) { return []; }   // Empty tree\n\n  lbm = lbm || this.getLowerBoundMatcher(query);\n  ubm = ubm || this.getUpperBoundMatcher(query);\n\n  if (lbm(this.key) && this.left) { append(res, this.left.betweenBounds(query, lbm, ubm)); }\n  if (lbm(this.key) && ubm(this.key)) { append(res, this.data); }\n  if (ubm(this.key) && this.right) { append(res, this.right.betweenBounds(query, lbm, ubm)); }\n\n  return res;\n};\n\n\n/**\n * Delete the current node if it is a leaf\n * Return true if it was deleted\n */\nBinarySearchTree.prototype.deleteIfLeaf = function () {\n  if (this.left || this.right) { return false; }\n\n  // The leaf is itself a root\n  if (!this.parent) {\n    delete this.key;\n    this.data = [];\n    return true;\n  }\n\n  if (this.parent.left === this) {\n    this.parent.left = null;\n  } else {\n    this.parent.right = null;\n  }\n\n  return true;\n};\n\n\n/**\n * Delete the current node if it has only one child\n * Return true if it was deleted\n */\nBinarySearchTree.prototype.deleteIfOnlyOneChild = function () {\n  var child;\n\n  if (this.left && !this.right) { child = this.left; }\n  if (!this.left && this.right) { child = this.right; }\n  if (!child) { return false; }\n\n  // Root\n  if (!this.parent) {\n    this.key = child.key;\n    this.data = child.data;\n\n    this.left = null;\n    if (child.left) {\n      this.left = child.left;\n      child.left.parent = this;\n    }\n\n    this.right = null;\n    if (child.right) {\n      this.right = child.right;\n      child.right.parent = this;\n    }\n\n    return true;\n  }\n\n  if (this.parent.left === this) {\n    this.parent.left = child;\n    child.parent = this.parent;\n  } else {\n    this.parent.right = child;\n    child.parent = this.parent;\n  }\n\n  return true;\n};\n\n\n/**\n * Delete a key or just a value\n * @param {Key} key\n * @param {Value} value Optional. If not set, the whole key is deleted. If set, only this value is deleted\n */\nBinarySearchTree.prototype.delete = function (key, value) {\n  var newData = [], replaceWith\n    , self = this\n    ;\n\n  if (!this.hasOwnProperty('key')) { return; }\n\n  if (this.compareKeys(key, this.key) < 0) {\n    if (this.left) { this.left.delete(key, value); }\n    return;\n  }\n\n  if (this.compareKeys(key, this.key) > 0) {\n    if (this.right) { this.right.delete(key, value); }\n    return;\n  }\n\n  if (!this.compareKeys(key, this.key) === 0) { return; }\n\n  // Delete only a value\n  if (this.data.length > 1 && value !== undefined) {\n    this.data.forEach(function (d) {\n      if (!self.checkValueEquality(d, value)) { newData.push(d); }\n    });\n    self.data = newData;\n    return;\n  }\n\n  // Delete the whole node\n  if (this.deleteIfLeaf()) {\n    return;\n  }\n  if (this.deleteIfOnlyOneChild()) {\n    return;\n  }\n\n  // We are in the case where the node to delete has two children\n  if (Math.random() >= 0.5) {   // Randomize replacement to avoid unbalancing the tree too much\n    // Use the in-order predecessor\n    replaceWith = this.left.getMaxKeyDescendant();\n\n    this.key = replaceWith.key;\n    this.data = replaceWith.data;\n\n    if (this === replaceWith.parent) {   // Special case\n      this.left = replaceWith.left;\n      if (replaceWith.left) { replaceWith.left.parent = replaceWith.parent; }\n    } else {\n      replaceWith.parent.right = replaceWith.left;\n      if (replaceWith.left) { replaceWith.left.parent = replaceWith.parent; }\n    }\n  } else {\n    // Use the in-order successor\n    replaceWith = this.right.getMinKeyDescendant();\n\n    this.key = replaceWith.key;\n    this.data = replaceWith.data;\n\n    if (this === replaceWith.parent) {   // Special case\n      this.right = replaceWith.right;\n      if (replaceWith.right) { replaceWith.right.parent = replaceWith.parent; }\n    } else {\n      replaceWith.parent.left = replaceWith.right;\n      if (replaceWith.right) { replaceWith.right.parent = replaceWith.parent; }\n    }\n  }\n};\n\n\n/**\n * Execute a function on every node of the tree, in key order\n * @param {Function} fn Signature: node. Most useful will probably be node.key and node.data\n */\nBinarySearchTree.prototype.executeOnEveryNode = function (fn) {\n  if (this.left) { this.left.executeOnEveryNode(fn); }\n  fn(this);\n  if (this.right) { this.right.executeOnEveryNode(fn); }\n};\n\n\n/**\n * Pretty print a tree\n * @param {Boolean} printData To print the nodes' data along with the key\n */\nBinarySearchTree.prototype.prettyPrint = function (printData, spacing) {\n  spacing = spacing || \"\";\n\n  console.log(spacing + \"* \" + this.key);\n  if (printData) { console.log(spacing + \"* \" + this.data); }\n\n  if (!this.left && !this.right) { return; }\n\n  if (this.left) {\n    this.left.prettyPrint(printData, spacing + \"  \");\n  } else {\n    console.log(spacing + \"  *\");\n  }\n  if (this.right) {\n    this.right.prettyPrint(printData, spacing + \"  \");\n  } else {\n    console.log(spacing + \"  *\");\n  }\n};\n\n\n\n\n// Interface\nmodule.exports = BinarySearchTree;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iaW5hcnktc2VhcmNoLXRyZWUvbGliL2JzdC5qcz85MzA0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU2ltcGxlIGJpbmFyeSBzZWFyY2ggdHJlZVxuICovXG52YXIgY3VzdG9tVXRpbHMgPSByZXF1aXJlKCcuL2N1c3RvbVV0aWxzJyk7XG5cblxuLyoqXG4gKiBDb25zdHJ1Y3RvclxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgT3B0aW9uYWxcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gIG9wdGlvbnMudW5pcXVlIFdoZXRoZXIgdG8gZW5mb3JjZSBhICd1bmlxdWUnIGNvbnN0cmFpbnQgb24gdGhlIGtleSBvciBub3RcbiAqIEBwYXJhbSB7S2V5fSAgICAgIG9wdGlvbnMua2V5IEluaXRpYWxpemUgdGhpcyBCU1QncyBrZXkgd2l0aCBrZXlcbiAqIEBwYXJhbSB7VmFsdWV9ICAgIG9wdGlvbnMudmFsdWUgSW5pdGlhbGl6ZSB0aGlzIEJTVCdzIGRhdGEgd2l0aCBbdmFsdWVdXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcHRpb25zLmNvbXBhcmVLZXlzIEluaXRpYWxpemUgdGhpcyBCU1QncyBjb21wYXJlS2V5c1xuICovXG5mdW5jdGlvbiBCaW5hcnlTZWFyY2hUcmVlIChvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIHRoaXMubGVmdCA9IG51bGw7XG4gIHRoaXMucmlnaHQgPSBudWxsO1xuICB0aGlzLnBhcmVudCA9IG9wdGlvbnMucGFyZW50ICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLnBhcmVudCA6IG51bGw7XG4gIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KCdrZXknKSkgeyB0aGlzLmtleSA9IG9wdGlvbnMua2V5OyB9XG4gIHRoaXMuZGF0YSA9IG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ3ZhbHVlJykgPyBbb3B0aW9ucy52YWx1ZV0gOiBbXTtcbiAgdGhpcy51bmlxdWUgPSBvcHRpb25zLnVuaXF1ZSB8fCBmYWxzZTtcblxuICB0aGlzLmNvbXBhcmVLZXlzID0gb3B0aW9ucy5jb21wYXJlS2V5cyB8fCBjdXN0b21VdGlscy5kZWZhdWx0Q29tcGFyZUtleXNGdW5jdGlvbjtcbiAgdGhpcy5jaGVja1ZhbHVlRXF1YWxpdHkgPSBvcHRpb25zLmNoZWNrVmFsdWVFcXVhbGl0eSB8fCBjdXN0b21VdGlscy5kZWZhdWx0Q2hlY2tWYWx1ZUVxdWFsaXR5O1xufVxuXG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBNZXRob2RzIHVzZWQgdG8gdGVzdCB0aGUgdHJlZVxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuXG4vKipcbiAqIEdldCB0aGUgZGVzY2VuZGFudCB3aXRoIG1heCBrZXlcbiAqL1xuQmluYXJ5U2VhcmNoVHJlZS5wcm90b3R5cGUuZ2V0TWF4S2V5RGVzY2VuZGFudCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMucmlnaHQpIHtcbiAgICByZXR1cm4gdGhpcy5yaWdodC5nZXRNYXhLZXlEZXNjZW5kYW50KCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBHZXQgdGhlIG1heGltdW0ga2V5XG4gKi9cbkJpbmFyeVNlYXJjaFRyZWUucHJvdG90eXBlLmdldE1heEtleSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuZ2V0TWF4S2V5RGVzY2VuZGFudCgpLmtleTtcbn07XG5cblxuLyoqXG4gKiBHZXQgdGhlIGRlc2NlbmRhbnQgd2l0aCBtaW4ga2V5XG4gKi9cbkJpbmFyeVNlYXJjaFRyZWUucHJvdG90eXBlLmdldE1pbktleURlc2NlbmRhbnQgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmxlZnQpIHtcbiAgICByZXR1cm4gdGhpcy5sZWZ0LmdldE1pbktleURlc2NlbmRhbnQoKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG59O1xuXG5cbi8qKlxuICogR2V0IHRoZSBtaW5pbXVtIGtleVxuICovXG5CaW5hcnlTZWFyY2hUcmVlLnByb3RvdHlwZS5nZXRNaW5LZXkgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmdldE1pbktleURlc2NlbmRhbnQoKS5rZXk7XG59O1xuXG5cbi8qKlxuICogQ2hlY2sgdGhhdCBhbGwgbm9kZXMgKGluY2wuIGxlYXZlcykgZnVsbGZpbCBjb25kaXRpb24gZ2l2ZW4gYnkgZm5cbiAqIHRlc3QgaXMgYSBmdW5jdGlvbiBwYXNzZWQgZXZlcnkgKGtleSwgZGF0YSkgYW5kIHdoaWNoIHRocm93cyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXRcbiAqL1xuQmluYXJ5U2VhcmNoVHJlZS5wcm90b3R5cGUuY2hlY2tBbGxOb2Rlc0Z1bGxmaWxsQ29uZGl0aW9uID0gZnVuY3Rpb24gKHRlc3QpIHtcbiAgaWYgKCF0aGlzLmhhc093blByb3BlcnR5KCdrZXknKSkgeyByZXR1cm47IH1cblxuICB0ZXN0KHRoaXMua2V5LCB0aGlzLmRhdGEpO1xuICBpZiAodGhpcy5sZWZ0KSB7IHRoaXMubGVmdC5jaGVja0FsbE5vZGVzRnVsbGZpbGxDb25kaXRpb24odGVzdCk7IH1cbiAgaWYgKHRoaXMucmlnaHQpIHsgdGhpcy5yaWdodC5jaGVja0FsbE5vZGVzRnVsbGZpbGxDb25kaXRpb24odGVzdCk7IH1cbn07XG5cblxuLyoqXG4gKiBDaGVjayB0aGF0IHRoZSBjb3JlIEJTVCBwcm9wZXJ0aWVzIG9uIG5vZGUgb3JkZXJpbmcgYXJlIHZlcmlmaWVkXG4gKiBUaHJvdyBpZiB0aGV5IGFyZW4ndFxuICovXG5CaW5hcnlTZWFyY2hUcmVlLnByb3RvdHlwZS5jaGVja05vZGVPcmRlcmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIGlmICghdGhpcy5oYXNPd25Qcm9wZXJ0eSgna2V5JykpIHsgcmV0dXJuOyB9XG5cbiAgaWYgKHRoaXMubGVmdCkge1xuICAgIHRoaXMubGVmdC5jaGVja0FsbE5vZGVzRnVsbGZpbGxDb25kaXRpb24oZnVuY3Rpb24gKGspIHtcbiAgICAgIGlmIChzZWxmLmNvbXBhcmVLZXlzKGssIHNlbGYua2V5KSA+PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVHJlZSB3aXRoIHJvb3QgJyArIHNlbGYua2V5ICsgJyBpcyBub3QgYSBiaW5hcnkgc2VhcmNoIHRyZWUnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLmxlZnQuY2hlY2tOb2RlT3JkZXJpbmcoKTtcbiAgfVxuXG4gIGlmICh0aGlzLnJpZ2h0KSB7XG4gICAgdGhpcy5yaWdodC5jaGVja0FsbE5vZGVzRnVsbGZpbGxDb25kaXRpb24oZnVuY3Rpb24gKGspIHtcbiAgICAgIGlmIChzZWxmLmNvbXBhcmVLZXlzKGssIHNlbGYua2V5KSA8PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVHJlZSB3aXRoIHJvb3QgJyArIHNlbGYua2V5ICsgJyBpcyBub3QgYSBiaW5hcnkgc2VhcmNoIHRyZWUnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLnJpZ2h0LmNoZWNrTm9kZU9yZGVyaW5nKCk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBDaGVjayB0aGF0IGFsbCBwb2ludGVycyBhcmUgY29oZXJlbnQgaW4gdGhpcyB0cmVlXG4gKi9cbkJpbmFyeVNlYXJjaFRyZWUucHJvdG90eXBlLmNoZWNrSW50ZXJuYWxQb2ludGVycyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMubGVmdCkge1xuICAgIGlmICh0aGlzLmxlZnQucGFyZW50ICE9PSB0aGlzKSB7IHRocm93IG5ldyBFcnJvcignUGFyZW50IHBvaW50ZXIgYnJva2VuIGZvciBrZXkgJyArIHRoaXMua2V5KTsgfVxuICAgIHRoaXMubGVmdC5jaGVja0ludGVybmFsUG9pbnRlcnMoKTtcbiAgfVxuXG4gIGlmICh0aGlzLnJpZ2h0KSB7XG4gICAgaWYgKHRoaXMucmlnaHQucGFyZW50ICE9PSB0aGlzKSB7IHRocm93IG5ldyBFcnJvcignUGFyZW50IHBvaW50ZXIgYnJva2VuIGZvciBrZXkgJyArIHRoaXMua2V5KTsgfVxuICAgIHRoaXMucmlnaHQuY2hlY2tJbnRlcm5hbFBvaW50ZXJzKCk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBDaGVjayB0aGF0IGEgdHJlZSBpcyBhIEJTVCBhcyBkZWZpbmVkIGhlcmUgKG5vZGUgb3JkZXJpbmcgYW5kIHBvaW50ZXIgcmVmZXJlbmNlcylcbiAqL1xuQmluYXJ5U2VhcmNoVHJlZS5wcm90b3R5cGUuY2hlY2tJc0JTVCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5jaGVja05vZGVPcmRlcmluZygpO1xuICB0aGlzLmNoZWNrSW50ZXJuYWxQb2ludGVycygpO1xuICBpZiAodGhpcy5wYXJlbnQpIHsgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHJvb3Qgc2hvdWxkbid0IGhhdmUgYSBwYXJlbnRcIik7IH1cbn07XG5cblxuLyoqXG4gKiBHZXQgbnVtYmVyIG9mIGtleXMgaW5zZXJ0ZWRcbiAqL1xuQmluYXJ5U2VhcmNoVHJlZS5wcm90b3R5cGUuZ2V0TnVtYmVyT2ZLZXlzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcmVzO1xuXG4gIGlmICghdGhpcy5oYXNPd25Qcm9wZXJ0eSgna2V5JykpIHsgcmV0dXJuIDA7IH1cblxuICByZXMgPSAxO1xuICBpZiAodGhpcy5sZWZ0KSB7IHJlcyArPSB0aGlzLmxlZnQuZ2V0TnVtYmVyT2ZLZXlzKCk7IH1cbiAgaWYgKHRoaXMucmlnaHQpIHsgcmVzICs9IHRoaXMucmlnaHQuZ2V0TnVtYmVyT2ZLZXlzKCk7IH1cblxuICByZXR1cm4gcmVzO1xufTtcblxuXG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBNZXRob2RzIHVzZWQgdG8gYWN0dWFsbHkgd29yayBvbiB0aGUgdHJlZVxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLyoqXG4gKiBDcmVhdGUgYSBCU1Qgc2ltaWxhciAoaS5lLiBzYW1lIG9wdGlvbnMgZXhjZXB0IGZvciBrZXkgYW5kIHZhbHVlKSB0byB0aGUgY3VycmVudCBvbmVcbiAqIFVzZSB0aGUgc2FtZSBjb25zdHJ1Y3RvciAoaS5lLiBCaW5hcnlTZWFyY2hUcmVlLCBBVkxUcmVlIGV0YylcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIHNlZSBjb25zdHJ1Y3RvclxuICovXG5CaW5hcnlTZWFyY2hUcmVlLnByb3RvdHlwZS5jcmVhdGVTaW1pbGFyID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIG9wdGlvbnMudW5pcXVlID0gdGhpcy51bmlxdWU7XG4gIG9wdGlvbnMuY29tcGFyZUtleXMgPSB0aGlzLmNvbXBhcmVLZXlzO1xuICBvcHRpb25zLmNoZWNrVmFsdWVFcXVhbGl0eSA9IHRoaXMuY2hlY2tWYWx1ZUVxdWFsaXR5O1xuXG4gIHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcihvcHRpb25zKTtcbn07XG5cblxuLyoqXG4gKiBDcmVhdGUgdGhlIGxlZnQgY2hpbGQgb2YgdGhpcyBCU1QgYW5kIHJldHVybiBpdFxuICovXG5CaW5hcnlTZWFyY2hUcmVlLnByb3RvdHlwZS5jcmVhdGVMZWZ0Q2hpbGQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICB2YXIgbGVmdENoaWxkID0gdGhpcy5jcmVhdGVTaW1pbGFyKG9wdGlvbnMpO1xuICBsZWZ0Q2hpbGQucGFyZW50ID0gdGhpcztcbiAgdGhpcy5sZWZ0ID0gbGVmdENoaWxkO1xuXG4gIHJldHVybiBsZWZ0Q2hpbGQ7XG59O1xuXG5cbi8qKlxuICogQ3JlYXRlIHRoZSByaWdodCBjaGlsZCBvZiB0aGlzIEJTVCBhbmQgcmV0dXJuIGl0XG4gKi9cbkJpbmFyeVNlYXJjaFRyZWUucHJvdG90eXBlLmNyZWF0ZVJpZ2h0Q2hpbGQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICB2YXIgcmlnaHRDaGlsZCA9IHRoaXMuY3JlYXRlU2ltaWxhcihvcHRpb25zKTtcbiAgcmlnaHRDaGlsZC5wYXJlbnQgPSB0aGlzO1xuICB0aGlzLnJpZ2h0ID0gcmlnaHRDaGlsZDtcblxuICByZXR1cm4gcmlnaHRDaGlsZDtcbn07XG5cblxuLyoqXG4gKiBJbnNlcnQgYSBuZXcgZWxlbWVudFxuICovXG5CaW5hcnlTZWFyY2hUcmVlLnByb3RvdHlwZS5pbnNlcnQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAvLyBFbXB0eSB0cmVlLCBpbnNlcnQgYXMgcm9vdFxuICBpZiAoIXRoaXMuaGFzT3duUHJvcGVydHkoJ2tleScpKSB7XG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy5kYXRhLnB1c2godmFsdWUpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFNhbWUga2V5IGFzIHJvb3RcbiAgaWYgKHRoaXMuY29tcGFyZUtleXModGhpcy5rZXksIGtleSkgPT09IDApIHtcbiAgICBpZiAodGhpcy51bmlxdWUpIHtcbiAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXCJDYW4ndCBpbnNlcnQga2V5IFwiICsga2V5ICsgXCIsIGl0IHZpb2xhdGVzIHRoZSB1bmlxdWUgY29uc3RyYWludFwiKTtcbiAgICAgIGVyci5rZXkgPSBrZXk7XG4gICAgICBlcnIuZXJyb3JUeXBlID0gJ3VuaXF1ZVZpb2xhdGVkJztcbiAgICAgIHRocm93IGVycjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kYXRhLnB1c2godmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodGhpcy5jb21wYXJlS2V5cyhrZXksIHRoaXMua2V5KSA8IDApIHtcbiAgICAvLyBJbnNlcnQgaW4gbGVmdCBzdWJ0cmVlXG4gICAgaWYgKHRoaXMubGVmdCkge1xuICAgICAgdGhpcy5sZWZ0Lmluc2VydChrZXksIHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jcmVhdGVMZWZ0Q2hpbGQoeyBrZXk6IGtleSwgdmFsdWU6IHZhbHVlIH0pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJbnNlcnQgaW4gcmlnaHQgc3VidHJlZVxuICAgIGlmICh0aGlzLnJpZ2h0KSB7XG4gICAgICB0aGlzLnJpZ2h0Lmluc2VydChrZXksIHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jcmVhdGVSaWdodENoaWxkKHsga2V5OiBrZXksIHZhbHVlOiB2YWx1ZSB9KTtcbiAgICB9XG4gIH1cbn07XG5cblxuLyoqXG4gKiBTZWFyY2ggZm9yIGFsbCBkYXRhIGNvcnJlc3BvbmRpbmcgdG8gYSBrZXlcbiAqL1xuQmluYXJ5U2VhcmNoVHJlZS5wcm90b3R5cGUuc2VhcmNoID0gZnVuY3Rpb24gKGtleSkge1xuICBpZiAoIXRoaXMuaGFzT3duUHJvcGVydHkoJ2tleScpKSB7IHJldHVybiBbXTsgfVxuXG4gIGlmICh0aGlzLmNvbXBhcmVLZXlzKHRoaXMua2V5LCBrZXkpID09PSAwKSB7IHJldHVybiB0aGlzLmRhdGE7IH1cblxuICBpZiAodGhpcy5jb21wYXJlS2V5cyhrZXksIHRoaXMua2V5KSA8IDApIHtcbiAgICBpZiAodGhpcy5sZWZ0KSB7XG4gICAgICByZXR1cm4gdGhpcy5sZWZ0LnNlYXJjaChrZXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICh0aGlzLnJpZ2h0KSB7XG4gICAgICByZXR1cm4gdGhpcy5yaWdodC5zZWFyY2goa2V5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgfVxufTtcblxuXG4vKipcbiAqIFJldHVybiBhIGZ1bmN0aW9uIHRoYXQgdGVsbHMgd2hldGhlciBhIGdpdmVuIGtleSBtYXRjaGVzIGEgbG93ZXIgYm91bmRcbiAqL1xuQmluYXJ5U2VhcmNoVHJlZS5wcm90b3R5cGUuZ2V0TG93ZXJCb3VuZE1hdGNoZXIgPSBmdW5jdGlvbiAocXVlcnkpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIC8vIE5vIGxvd2VyIGJvdW5kXG4gIGlmICghcXVlcnkuaGFzT3duUHJvcGVydHkoJyRndCcpICYmICFxdWVyeS5oYXNPd25Qcm9wZXJ0eSgnJGd0ZScpKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRydWU7IH07XG4gIH1cblxuICBpZiAocXVlcnkuaGFzT3duUHJvcGVydHkoJyRndCcpICYmIHF1ZXJ5Lmhhc093blByb3BlcnR5KCckZ3RlJykpIHtcbiAgICBpZiAoc2VsZi5jb21wYXJlS2V5cyhxdWVyeS4kZ3RlLCBxdWVyeS4kZ3QpID09PSAwKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gc2VsZi5jb21wYXJlS2V5cyhrZXksIHF1ZXJ5LiRndCkgPiAwOyB9O1xuICAgIH1cblxuICAgIGlmIChzZWxmLmNvbXBhcmVLZXlzKHF1ZXJ5LiRndGUsIHF1ZXJ5LiRndCkgPiAwKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gc2VsZi5jb21wYXJlS2V5cyhrZXksIHF1ZXJ5LiRndGUpID49IDA7IH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBzZWxmLmNvbXBhcmVLZXlzKGtleSwgcXVlcnkuJGd0KSA+IDA7IH07XG4gICAgfVxuICB9XG5cbiAgaWYgKHF1ZXJ5Lmhhc093blByb3BlcnR5KCckZ3QnKSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBzZWxmLmNvbXBhcmVLZXlzKGtleSwgcXVlcnkuJGd0KSA+IDA7IH07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIHNlbGYuY29tcGFyZUtleXMoa2V5LCBxdWVyeS4kZ3RlKSA+PSAwOyB9O1xuICB9XG59O1xuXG5cbi8qKlxuICogUmV0dXJuIGEgZnVuY3Rpb24gdGhhdCB0ZWxscyB3aGV0aGVyIGEgZ2l2ZW4ga2V5IG1hdGNoZXMgYW4gdXBwZXIgYm91bmRcbiAqL1xuQmluYXJ5U2VhcmNoVHJlZS5wcm90b3R5cGUuZ2V0VXBwZXJCb3VuZE1hdGNoZXIgPSBmdW5jdGlvbiAocXVlcnkpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIC8vIE5vIGxvd2VyIGJvdW5kXG4gIGlmICghcXVlcnkuaGFzT3duUHJvcGVydHkoJyRsdCcpICYmICFxdWVyeS5oYXNPd25Qcm9wZXJ0eSgnJGx0ZScpKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRydWU7IH07XG4gIH1cblxuICBpZiAocXVlcnkuaGFzT3duUHJvcGVydHkoJyRsdCcpICYmIHF1ZXJ5Lmhhc093blByb3BlcnR5KCckbHRlJykpIHtcbiAgICBpZiAoc2VsZi5jb21wYXJlS2V5cyhxdWVyeS4kbHRlLCBxdWVyeS4kbHQpID09PSAwKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gc2VsZi5jb21wYXJlS2V5cyhrZXksIHF1ZXJ5LiRsdCkgPCAwOyB9O1xuICAgIH1cblxuICAgIGlmIChzZWxmLmNvbXBhcmVLZXlzKHF1ZXJ5LiRsdGUsIHF1ZXJ5LiRsdCkgPCAwKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gc2VsZi5jb21wYXJlS2V5cyhrZXksIHF1ZXJ5LiRsdGUpIDw9IDA7IH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBzZWxmLmNvbXBhcmVLZXlzKGtleSwgcXVlcnkuJGx0KSA8IDA7IH07XG4gICAgfVxuICB9XG5cbiAgaWYgKHF1ZXJ5Lmhhc093blByb3BlcnR5KCckbHQnKSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBzZWxmLmNvbXBhcmVLZXlzKGtleSwgcXVlcnkuJGx0KSA8IDA7IH07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIHNlbGYuY29tcGFyZUtleXMoa2V5LCBxdWVyeS4kbHRlKSA8PSAwOyB9O1xuICB9XG59O1xuXG5cbi8vIEFwcGVuZCBhbGwgZWxlbWVudHMgaW4gdG9BcHBlbmQgdG8gYXJyYXlcbmZ1bmN0aW9uIGFwcGVuZCAoYXJyYXksIHRvQXBwZW5kKSB7XG4gIHZhciBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCB0b0FwcGVuZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGFycmF5LnB1c2godG9BcHBlbmRbaV0pO1xuICB9XG59XG5cblxuLyoqXG4gKiBHZXQgYWxsIGRhdGEgZm9yIGEga2V5IGJldHdlZW4gYm91bmRzXG4gKiBSZXR1cm4gaXQgaW4ga2V5IG9yZGVyXG4gKiBAcGFyYW0ge09iamVjdH0gcXVlcnkgTW9uZ28tc3R5bGUgcXVlcnkgd2hlcmUga2V5cyBhcmUgJGx0LCAkbHRlLCAkZ3Qgb3IgJGd0ZSAob3RoZXIga2V5cyBhcmUgbm90IGNvbnNpZGVyZWQpXG4gKiBAcGFyYW0ge0Z1bmN0aW9uc30gbGJtL3VibSBtYXRjaGluZyBmdW5jdGlvbnMgY2FsY3VsYXRlZCBhdCB0aGUgZmlyc3QgcmVjdXJzaXZlIHN0ZXBcbiAqL1xuQmluYXJ5U2VhcmNoVHJlZS5wcm90b3R5cGUuYmV0d2VlbkJvdW5kcyA9IGZ1bmN0aW9uIChxdWVyeSwgbGJtLCB1Ym0pIHtcbiAgdmFyIHJlcyA9IFtdO1xuXG4gIGlmICghdGhpcy5oYXNPd25Qcm9wZXJ0eSgna2V5JykpIHsgcmV0dXJuIFtdOyB9ICAgLy8gRW1wdHkgdHJlZVxuXG4gIGxibSA9IGxibSB8fCB0aGlzLmdldExvd2VyQm91bmRNYXRjaGVyKHF1ZXJ5KTtcbiAgdWJtID0gdWJtIHx8IHRoaXMuZ2V0VXBwZXJCb3VuZE1hdGNoZXIocXVlcnkpO1xuXG4gIGlmIChsYm0odGhpcy5rZXkpICYmIHRoaXMubGVmdCkgeyBhcHBlbmQocmVzLCB0aGlzLmxlZnQuYmV0d2VlbkJvdW5kcyhxdWVyeSwgbGJtLCB1Ym0pKTsgfVxuICBpZiAobGJtKHRoaXMua2V5KSAmJiB1Ym0odGhpcy5rZXkpKSB7IGFwcGVuZChyZXMsIHRoaXMuZGF0YSk7IH1cbiAgaWYgKHVibSh0aGlzLmtleSkgJiYgdGhpcy5yaWdodCkgeyBhcHBlbmQocmVzLCB0aGlzLnJpZ2h0LmJldHdlZW5Cb3VuZHMocXVlcnksIGxibSwgdWJtKSk7IH1cblxuICByZXR1cm4gcmVzO1xufTtcblxuXG4vKipcbiAqIERlbGV0ZSB0aGUgY3VycmVudCBub2RlIGlmIGl0IGlzIGEgbGVhZlxuICogUmV0dXJuIHRydWUgaWYgaXQgd2FzIGRlbGV0ZWRcbiAqL1xuQmluYXJ5U2VhcmNoVHJlZS5wcm90b3R5cGUuZGVsZXRlSWZMZWFmID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5sZWZ0IHx8IHRoaXMucmlnaHQpIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgLy8gVGhlIGxlYWYgaXMgaXRzZWxmIGEgcm9vdFxuICBpZiAoIXRoaXMucGFyZW50KSB7XG4gICAgZGVsZXRlIHRoaXMua2V5O1xuICAgIHRoaXMuZGF0YSA9IFtdO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHRoaXMucGFyZW50LmxlZnQgPT09IHRoaXMpIHtcbiAgICB0aGlzLnBhcmVudC5sZWZ0ID0gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnBhcmVudC5yaWdodCA9IG51bGw7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cblxuLyoqXG4gKiBEZWxldGUgdGhlIGN1cnJlbnQgbm9kZSBpZiBpdCBoYXMgb25seSBvbmUgY2hpbGRcbiAqIFJldHVybiB0cnVlIGlmIGl0IHdhcyBkZWxldGVkXG4gKi9cbkJpbmFyeVNlYXJjaFRyZWUucHJvdG90eXBlLmRlbGV0ZUlmT25seU9uZUNoaWxkID0gZnVuY3Rpb24gKCkge1xuICB2YXIgY2hpbGQ7XG5cbiAgaWYgKHRoaXMubGVmdCAmJiAhdGhpcy5yaWdodCkgeyBjaGlsZCA9IHRoaXMubGVmdDsgfVxuICBpZiAoIXRoaXMubGVmdCAmJiB0aGlzLnJpZ2h0KSB7IGNoaWxkID0gdGhpcy5yaWdodDsgfVxuICBpZiAoIWNoaWxkKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gIC8vIFJvb3RcbiAgaWYgKCF0aGlzLnBhcmVudCkge1xuICAgIHRoaXMua2V5ID0gY2hpbGQua2V5O1xuICAgIHRoaXMuZGF0YSA9IGNoaWxkLmRhdGE7XG5cbiAgICB0aGlzLmxlZnQgPSBudWxsO1xuICAgIGlmIChjaGlsZC5sZWZ0KSB7XG4gICAgICB0aGlzLmxlZnQgPSBjaGlsZC5sZWZ0O1xuICAgICAgY2hpbGQubGVmdC5wYXJlbnQgPSB0aGlzO1xuICAgIH1cblxuICAgIHRoaXMucmlnaHQgPSBudWxsO1xuICAgIGlmIChjaGlsZC5yaWdodCkge1xuICAgICAgdGhpcy5yaWdodCA9IGNoaWxkLnJpZ2h0O1xuICAgICAgY2hpbGQucmlnaHQucGFyZW50ID0gdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0aGlzLnBhcmVudC5sZWZ0ID09PSB0aGlzKSB7XG4gICAgdGhpcy5wYXJlbnQubGVmdCA9IGNoaWxkO1xuICAgIGNoaWxkLnBhcmVudCA9IHRoaXMucGFyZW50O1xuICB9IGVsc2Uge1xuICAgIHRoaXMucGFyZW50LnJpZ2h0ID0gY2hpbGQ7XG4gICAgY2hpbGQucGFyZW50ID0gdGhpcy5wYXJlbnQ7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cblxuLyoqXG4gKiBEZWxldGUgYSBrZXkgb3IganVzdCBhIHZhbHVlXG4gKiBAcGFyYW0ge0tleX0ga2V5XG4gKiBAcGFyYW0ge1ZhbHVlfSB2YWx1ZSBPcHRpb25hbC4gSWYgbm90IHNldCwgdGhlIHdob2xlIGtleSBpcyBkZWxldGVkLiBJZiBzZXQsIG9ubHkgdGhpcyB2YWx1ZSBpcyBkZWxldGVkXG4gKi9cbkJpbmFyeVNlYXJjaFRyZWUucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHZhciBuZXdEYXRhID0gW10sIHJlcGxhY2VXaXRoXG4gICAgLCBzZWxmID0gdGhpc1xuICAgIDtcblxuICBpZiAoIXRoaXMuaGFzT3duUHJvcGVydHkoJ2tleScpKSB7IHJldHVybjsgfVxuXG4gIGlmICh0aGlzLmNvbXBhcmVLZXlzKGtleSwgdGhpcy5rZXkpIDwgMCkge1xuICAgIGlmICh0aGlzLmxlZnQpIHsgdGhpcy5sZWZ0LmRlbGV0ZShrZXksIHZhbHVlKTsgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0aGlzLmNvbXBhcmVLZXlzKGtleSwgdGhpcy5rZXkpID4gMCkge1xuICAgIGlmICh0aGlzLnJpZ2h0KSB7IHRoaXMucmlnaHQuZGVsZXRlKGtleSwgdmFsdWUpOyB9XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCF0aGlzLmNvbXBhcmVLZXlzKGtleSwgdGhpcy5rZXkpID09PSAwKSB7IHJldHVybjsgfVxuXG4gIC8vIERlbGV0ZSBvbmx5IGEgdmFsdWVcbiAgaWYgKHRoaXMuZGF0YS5sZW5ndGggPiAxICYmIHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzLmRhdGEuZm9yRWFjaChmdW5jdGlvbiAoZCkge1xuICAgICAgaWYgKCFzZWxmLmNoZWNrVmFsdWVFcXVhbGl0eShkLCB2YWx1ZSkpIHsgbmV3RGF0YS5wdXNoKGQpOyB9XG4gICAgfSk7XG4gICAgc2VsZi5kYXRhID0gbmV3RGF0YTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBEZWxldGUgdGhlIHdob2xlIG5vZGVcbiAgaWYgKHRoaXMuZGVsZXRlSWZMZWFmKCkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHRoaXMuZGVsZXRlSWZPbmx5T25lQ2hpbGQoKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFdlIGFyZSBpbiB0aGUgY2FzZSB3aGVyZSB0aGUgbm9kZSB0byBkZWxldGUgaGFzIHR3byBjaGlsZHJlblxuICBpZiAoTWF0aC5yYW5kb20oKSA+PSAwLjUpIHsgICAvLyBSYW5kb21pemUgcmVwbGFjZW1lbnQgdG8gYXZvaWQgdW5iYWxhbmNpbmcgdGhlIHRyZWUgdG9vIG11Y2hcbiAgICAvLyBVc2UgdGhlIGluLW9yZGVyIHByZWRlY2Vzc29yXG4gICAgcmVwbGFjZVdpdGggPSB0aGlzLmxlZnQuZ2V0TWF4S2V5RGVzY2VuZGFudCgpO1xuXG4gICAgdGhpcy5rZXkgPSByZXBsYWNlV2l0aC5rZXk7XG4gICAgdGhpcy5kYXRhID0gcmVwbGFjZVdpdGguZGF0YTtcblxuICAgIGlmICh0aGlzID09PSByZXBsYWNlV2l0aC5wYXJlbnQpIHsgICAvLyBTcGVjaWFsIGNhc2VcbiAgICAgIHRoaXMubGVmdCA9IHJlcGxhY2VXaXRoLmxlZnQ7XG4gICAgICBpZiAocmVwbGFjZVdpdGgubGVmdCkgeyByZXBsYWNlV2l0aC5sZWZ0LnBhcmVudCA9IHJlcGxhY2VXaXRoLnBhcmVudDsgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXBsYWNlV2l0aC5wYXJlbnQucmlnaHQgPSByZXBsYWNlV2l0aC5sZWZ0O1xuICAgICAgaWYgKHJlcGxhY2VXaXRoLmxlZnQpIHsgcmVwbGFjZVdpdGgubGVmdC5wYXJlbnQgPSByZXBsYWNlV2l0aC5wYXJlbnQ7IH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gVXNlIHRoZSBpbi1vcmRlciBzdWNjZXNzb3JcbiAgICByZXBsYWNlV2l0aCA9IHRoaXMucmlnaHQuZ2V0TWluS2V5RGVzY2VuZGFudCgpO1xuXG4gICAgdGhpcy5rZXkgPSByZXBsYWNlV2l0aC5rZXk7XG4gICAgdGhpcy5kYXRhID0gcmVwbGFjZVdpdGguZGF0YTtcblxuICAgIGlmICh0aGlzID09PSByZXBsYWNlV2l0aC5wYXJlbnQpIHsgICAvLyBTcGVjaWFsIGNhc2VcbiAgICAgIHRoaXMucmlnaHQgPSByZXBsYWNlV2l0aC5yaWdodDtcbiAgICAgIGlmIChyZXBsYWNlV2l0aC5yaWdodCkgeyByZXBsYWNlV2l0aC5yaWdodC5wYXJlbnQgPSByZXBsYWNlV2l0aC5wYXJlbnQ7IH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVwbGFjZVdpdGgucGFyZW50LmxlZnQgPSByZXBsYWNlV2l0aC5yaWdodDtcbiAgICAgIGlmIChyZXBsYWNlV2l0aC5yaWdodCkgeyByZXBsYWNlV2l0aC5yaWdodC5wYXJlbnQgPSByZXBsYWNlV2l0aC5wYXJlbnQ7IH1cbiAgICB9XG4gIH1cbn07XG5cblxuLyoqXG4gKiBFeGVjdXRlIGEgZnVuY3Rpb24gb24gZXZlcnkgbm9kZSBvZiB0aGUgdHJlZSwgaW4ga2V5IG9yZGVyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBTaWduYXR1cmU6IG5vZGUuIE1vc3QgdXNlZnVsIHdpbGwgcHJvYmFibHkgYmUgbm9kZS5rZXkgYW5kIG5vZGUuZGF0YVxuICovXG5CaW5hcnlTZWFyY2hUcmVlLnByb3RvdHlwZS5leGVjdXRlT25FdmVyeU5vZGUgPSBmdW5jdGlvbiAoZm4pIHtcbiAgaWYgKHRoaXMubGVmdCkgeyB0aGlzLmxlZnQuZXhlY3V0ZU9uRXZlcnlOb2RlKGZuKTsgfVxuICBmbih0aGlzKTtcbiAgaWYgKHRoaXMucmlnaHQpIHsgdGhpcy5yaWdodC5leGVjdXRlT25FdmVyeU5vZGUoZm4pOyB9XG59O1xuXG5cbi8qKlxuICogUHJldHR5IHByaW50IGEgdHJlZVxuICogQHBhcmFtIHtCb29sZWFufSBwcmludERhdGEgVG8gcHJpbnQgdGhlIG5vZGVzJyBkYXRhIGFsb25nIHdpdGggdGhlIGtleVxuICovXG5CaW5hcnlTZWFyY2hUcmVlLnByb3RvdHlwZS5wcmV0dHlQcmludCA9IGZ1bmN0aW9uIChwcmludERhdGEsIHNwYWNpbmcpIHtcbiAgc3BhY2luZyA9IHNwYWNpbmcgfHwgXCJcIjtcblxuICBjb25zb2xlLmxvZyhzcGFjaW5nICsgXCIqIFwiICsgdGhpcy5rZXkpO1xuICBpZiAocHJpbnREYXRhKSB7IGNvbnNvbGUubG9nKHNwYWNpbmcgKyBcIiogXCIgKyB0aGlzLmRhdGEpOyB9XG5cbiAgaWYgKCF0aGlzLmxlZnQgJiYgIXRoaXMucmlnaHQpIHsgcmV0dXJuOyB9XG5cbiAgaWYgKHRoaXMubGVmdCkge1xuICAgIHRoaXMubGVmdC5wcmV0dHlQcmludChwcmludERhdGEsIHNwYWNpbmcgKyBcIiAgXCIpO1xuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUubG9nKHNwYWNpbmcgKyBcIiAgKlwiKTtcbiAgfVxuICBpZiAodGhpcy5yaWdodCkge1xuICAgIHRoaXMucmlnaHQucHJldHR5UHJpbnQocHJpbnREYXRhLCBzcGFjaW5nICsgXCIgIFwiKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zb2xlLmxvZyhzcGFjaW5nICsgXCIgICpcIik7XG4gIH1cbn07XG5cblxuXG5cbi8vIEludGVyZmFjZVxubW9kdWxlLmV4cG9ydHMgPSBCaW5hcnlTZWFyY2hUcmVlO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n")},function(module,exports){eval('/**\n * Return an array with the numbers from 0 to n-1, in a random order\n */\nfunction getRandomArray (n) {\n  var res, next;\n\n  if (n === 0) { return []; }\n  if (n === 1) { return [0]; }\n\n  res = getRandomArray(n - 1);\n  next = Math.floor(Math.random() * n);\n  res.splice(next, 0, n - 1);   // Add n-1 at a random position in the array\n\n  return res;\n};\nmodule.exports.getRandomArray = getRandomArray;\n\n\n/*\n * Default compareKeys function will work for numbers, strings and dates\n */\nfunction defaultCompareKeysFunction (a, b) {\n  if (a < b) { return -1; }\n  if (a > b) { return 1; }\n  if (a === b) { return 0; }\n\n  var err = new Error("Couldn\'t compare elements");\n  err.a = a;\n  err.b = b;\n  throw err;\n}\nmodule.exports.defaultCompareKeysFunction = defaultCompareKeysFunction;\n\n\n/**\n * Check whether two values are equal (used in non-unique deletion)\n */\nfunction defaultCheckValueEquality (a, b) {\n  return a === b;\n}\nmodule.exports.defaultCheckValueEquality = defaultCheckValueEquality;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iaW5hcnktc2VhcmNoLXRyZWUvbGliL2N1c3RvbVV0aWxzLmpzPzg4ZmYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBSZXR1cm4gYW4gYXJyYXkgd2l0aCB0aGUgbnVtYmVycyBmcm9tIDAgdG8gbi0xLCBpbiBhIHJhbmRvbSBvcmRlclxuICovXG5mdW5jdGlvbiBnZXRSYW5kb21BcnJheSAobikge1xuICB2YXIgcmVzLCBuZXh0O1xuXG4gIGlmIChuID09PSAwKSB7IHJldHVybiBbXTsgfVxuICBpZiAobiA9PT0gMSkgeyByZXR1cm4gWzBdOyB9XG5cbiAgcmVzID0gZ2V0UmFuZG9tQXJyYXkobiAtIDEpO1xuICBuZXh0ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbik7XG4gIHJlcy5zcGxpY2UobmV4dCwgMCwgbiAtIDEpOyAgIC8vIEFkZCBuLTEgYXQgYSByYW5kb20gcG9zaXRpb24gaW4gdGhlIGFycmF5XG5cbiAgcmV0dXJuIHJlcztcbn07XG5tb2R1bGUuZXhwb3J0cy5nZXRSYW5kb21BcnJheSA9IGdldFJhbmRvbUFycmF5O1xuXG5cbi8qXG4gKiBEZWZhdWx0IGNvbXBhcmVLZXlzIGZ1bmN0aW9uIHdpbGwgd29yayBmb3IgbnVtYmVycywgc3RyaW5ncyBhbmQgZGF0ZXNcbiAqL1xuZnVuY3Rpb24gZGVmYXVsdENvbXBhcmVLZXlzRnVuY3Rpb24gKGEsIGIpIHtcbiAgaWYgKGEgPCBiKSB7IHJldHVybiAtMTsgfVxuICBpZiAoYSA+IGIpIHsgcmV0dXJuIDE7IH1cbiAgaWYgKGEgPT09IGIpIHsgcmV0dXJuIDA7IH1cblxuICB2YXIgZXJyID0gbmV3IEVycm9yKFwiQ291bGRuJ3QgY29tcGFyZSBlbGVtZW50c1wiKTtcbiAgZXJyLmEgPSBhO1xuICBlcnIuYiA9IGI7XG4gIHRocm93IGVycjtcbn1cbm1vZHVsZS5leHBvcnRzLmRlZmF1bHRDb21wYXJlS2V5c0Z1bmN0aW9uID0gZGVmYXVsdENvbXBhcmVLZXlzRnVuY3Rpb247XG5cblxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIHR3byB2YWx1ZXMgYXJlIGVxdWFsICh1c2VkIGluIG5vbi11bmlxdWUgZGVsZXRpb24pXG4gKi9cbmZ1bmN0aW9uIGRlZmF1bHRDaGVja1ZhbHVlRXF1YWxpdHkgKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0Q2hlY2tWYWx1ZUVxdWFsaXR5ID0gZGVmYXVsdENoZWNrVmFsdWVFcXVhbGl0eTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1\n')},function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9zdHlsZXMvaW5kZXguY3NzPzU5ZDAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n")},,function(module,exports,__webpack_require__){eval("module.exports.BinarySearchTree = __webpack_require__(0);\nmodule.exports.AVLTree = __webpack_require__(5);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iaW5hcnktc2VhcmNoLXRyZWUvaW5kZXguanM/YjAzZCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cy5CaW5hcnlTZWFyY2hUcmVlID0gcmVxdWlyZSgnLi9saWIvYnN0Jyk7XG5tb2R1bGUuZXhwb3J0cy5BVkxUcmVlID0gcmVxdWlyZSgnLi9saWIvYXZsdHJlZScpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4\n")},function(module,exports,__webpack_require__){eval("/**\n * Self-balancing binary search tree using the AVL implementation\n */\nvar BinarySearchTree = __webpack_require__(0)\n  , customUtils = __webpack_require__(1)\n  , util = __webpack_require__(6)\n  , _ = __webpack_require__(10)\n  ;\n\n\n/**\n * Constructor\n * We can't use a direct pointer to the root node (as in the simple binary search tree)\n * as the root will change during tree rotations\n * @param {Boolean}  options.unique Whether to enforce a 'unique' constraint on the key or not\n * @param {Function} options.compareKeys Initialize this BST's compareKeys\n */\nfunction AVLTree (options) {\n  this.tree = new _AVLTree(options);\n}\n\n\n/**\n * Constructor of the internal AVLTree\n * @param {Object} options Optional\n * @param {Boolean}  options.unique Whether to enforce a 'unique' constraint on the key or not\n * @param {Key}      options.key Initialize this BST's key with key\n * @param {Value}    options.value Initialize this BST's data with [value]\n * @param {Function} options.compareKeys Initialize this BST's compareKeys\n */\nfunction _AVLTree (options) {\n  options = options || {};\n\n  this.left = null;\n  this.right = null;\n  this.parent = options.parent !== undefined ? options.parent : null;\n  if (options.hasOwnProperty('key')) { this.key = options.key; }\n  this.data = options.hasOwnProperty('value') ? [options.value] : [];\n  this.unique = options.unique || false;\n\n  this.compareKeys = options.compareKeys || customUtils.defaultCompareKeysFunction;\n  this.checkValueEquality = options.checkValueEquality || customUtils.defaultCheckValueEquality;\n}\n\n\n/**\n * Inherit basic functions from the basic binary search tree\n */\nutil.inherits(_AVLTree, BinarySearchTree);\n\n/**\n * Keep a pointer to the internal tree constructor for testing purposes\n */\nAVLTree._AVLTree = _AVLTree;\n\n\n/**\n * Check the recorded height is correct for every node\n * Throws if one height doesn't match\n */\n_AVLTree.prototype.checkHeightCorrect = function () {\n  var leftH, rightH;\n\n  if (!this.hasOwnProperty('key')) { return; }   // Empty tree\n\n  if (this.left && this.left.height === undefined) { throw new Error(\"Undefined height for node \" + this.left.key); }\n  if (this.right && this.right.height === undefined) { throw new Error(\"Undefined height for node \" + this.right.key); }\n  if (this.height === undefined) { throw new Error(\"Undefined height for node \" + this.key); }\n\n  leftH = this.left ? this.left.height : 0;\n  rightH = this.right ? this.right.height : 0;\n\n  if (this.height !== 1 + Math.max(leftH, rightH)) { throw new Error(\"Height constraint failed for node \" + this.key); }\n  if (this.left) { this.left.checkHeightCorrect(); }\n  if (this.right) { this.right.checkHeightCorrect(); }\n};\n\n\n/**\n * Return the balance factor\n */\n_AVLTree.prototype.balanceFactor = function () {\n  var leftH = this.left ? this.left.height : 0\n    , rightH = this.right ? this.right.height : 0\n    ;\n  return leftH - rightH;\n};\n\n\n/**\n * Check that the balance factors are all between -1 and 1\n */\n_AVLTree.prototype.checkBalanceFactors = function () {\n  if (Math.abs(this.balanceFactor()) > 1) { throw new Error('Tree is unbalanced at node ' + this.key); }\n\n  if (this.left) { this.left.checkBalanceFactors(); }\n  if (this.right) { this.right.checkBalanceFactors(); }\n};\n\n\n/**\n * When checking if the BST conditions are met, also check that the heights are correct\n * and the tree is balanced\n */\n_AVLTree.prototype.checkIsAVLT = function () {\n  _AVLTree.super_.prototype.checkIsBST.call(this);\n  this.checkHeightCorrect();\n  this.checkBalanceFactors();\n};\nAVLTree.prototype.checkIsAVLT = function () { this.tree.checkIsAVLT(); };\n\n\n/**\n * Perform a right rotation of the tree if possible\n * and return the root of the resulting tree\n * The resulting tree's nodes' heights are also updated\n */\n_AVLTree.prototype.rightRotation = function () {\n  var q = this\n    , p = this.left\n    , b\n    , ah, bh, ch;\n\n  if (!p) { return this; }   // No change\n\n  b = p.right;\n\n  // Alter tree structure\n  if (q.parent) {\n    p.parent = q.parent;\n    if (q.parent.left === q) { q.parent.left = p; } else { q.parent.right = p; }\n  } else {\n    p.parent = null;\n  }\n  p.right = q;\n  q.parent = p;\n  q.left = b;\n  if (b) { b.parent = q; }\n\n  // Update heights\n  ah = p.left ? p.left.height : 0;\n  bh = b ? b.height : 0;\n  ch = q.right ? q.right.height : 0;\n  q.height = Math.max(bh, ch) + 1;\n  p.height = Math.max(ah, q.height) + 1;\n\n  return p;\n};\n\n\n/**\n * Perform a left rotation of the tree if possible\n * and return the root of the resulting tree\n * The resulting tree's nodes' heights are also updated\n */\n_AVLTree.prototype.leftRotation = function () {\n  var p = this\n    , q = this.right\n    , b\n    , ah, bh, ch;\n\n  if (!q) { return this; }   // No change\n\n  b = q.left;\n\n  // Alter tree structure\n  if (p.parent) {\n    q.parent = p.parent;\n    if (p.parent.left === p) { p.parent.left = q; } else { p.parent.right = q; }\n  } else {\n    q.parent = null;\n  }\n  q.left = p;\n  p.parent = q;\n  p.right = b;\n  if (b) { b.parent = p; }\n\n  // Update heights\n  ah = p.left ? p.left.height : 0;\n  bh = b ? b.height : 0;\n  ch = q.right ? q.right.height : 0;\n  p.height = Math.max(ah, bh) + 1;\n  q.height = Math.max(ch, p.height) + 1;\n\n  return q;\n};\n\n\n/**\n * Modify the tree if its right subtree is too small compared to the left\n * Return the new root if any\n */\n_AVLTree.prototype.rightTooSmall = function () {\n  if (this.balanceFactor() <= 1) { return this; }   // Right is not too small, don't change\n\n  if (this.left.balanceFactor() < 0) {\n    this.left.leftRotation();\n  }\n\n  return this.rightRotation();\n};\n\n\n/**\n * Modify the tree if its left subtree is too small compared to the right\n * Return the new root if any\n */\n_AVLTree.prototype.leftTooSmall = function () {\n  if (this.balanceFactor() >= -1) { return this; }   // Left is not too small, don't change\n\n  if (this.right.balanceFactor() > 0) {\n    this.right.rightRotation();\n  }\n\n  return this.leftRotation();\n};\n\n\n/**\n * Rebalance the tree along the given path. The path is given reversed (as he was calculated\n * in the insert and delete functions).\n * Returns the new root of the tree\n * Of course, the first element of the path must be the root of the tree\n */\n_AVLTree.prototype.rebalanceAlongPath = function (path) {\n  var newRoot = this\n    , rotated\n    , i;\n\n  if (!this.hasOwnProperty('key')) { delete this.height; return this; }   // Empty tree\n\n  // Rebalance the tree and update all heights\n  for (i = path.length - 1; i >= 0; i -= 1) {\n    path[i].height = 1 + Math.max(path[i].left ? path[i].left.height : 0, path[i].right ? path[i].right.height : 0);\n\n    if (path[i].balanceFactor() > 1) {\n      rotated = path[i].rightTooSmall();\n      if (i === 0) { newRoot = rotated; }\n    }\n\n    if (path[i].balanceFactor() < -1) {\n      rotated = path[i].leftTooSmall();\n      if (i === 0) { newRoot = rotated; }\n    }\n  }\n\n  return newRoot;\n};\n\n\n/**\n * Insert a key, value pair in the tree while maintaining the AVL tree height constraint\n * Return a pointer to the root node, which may have changed\n */\n_AVLTree.prototype.insert = function (key, value) {\n  var insertPath = []\n    , currentNode = this\n    ;\n\n  // Empty tree, insert as root\n  if (!this.hasOwnProperty('key')) {\n    this.key = key;\n    this.data.push(value);\n    this.height = 1;\n    return this;\n  }\n\n  // Insert new leaf at the right place\n  while (true) {\n    // Same key: no change in the tree structure\n    if (currentNode.compareKeys(currentNode.key, key) === 0) {\n      if (currentNode.unique) {\n        var err = new Error(\"Can't insert key \" + key + \", it violates the unique constraint\");\n        err.key = key;\n        err.errorType = 'uniqueViolated';\n        throw err;\n      } else {\n        currentNode.data.push(value);\n      }\n      return this;\n    }\n\n    insertPath.push(currentNode);\n\n    if (currentNode.compareKeys(key, currentNode.key) < 0) {\n      if (!currentNode.left) {\n        insertPath.push(currentNode.createLeftChild({ key: key, value: value }));\n        break;\n      } else {\n        currentNode = currentNode.left;\n      }\n    } else {\n      if (!currentNode.right) {\n        insertPath.push(currentNode.createRightChild({ key: key, value: value }));\n        break;\n      } else {\n        currentNode = currentNode.right;\n      }\n    }\n  }\n\n  return this.rebalanceAlongPath(insertPath);\n};\n\n// Insert in the internal tree, update the pointer to the root if needed\nAVLTree.prototype.insert = function (key, value) {\n  var newTree = this.tree.insert(key, value);\n\n  // If newTree is undefined, that means its structure was not modified\n  if (newTree) { this.tree = newTree; }\n};\n\n\n/**\n * Delete a key or just a value and return the new root of the tree\n * @param {Key} key\n * @param {Value} value Optional. If not set, the whole key is deleted. If set, only this value is deleted\n */\n_AVLTree.prototype.delete = function (key, value) {\n  var newData = [], replaceWith\n    , self = this\n    , currentNode = this\n    , deletePath = []\n    ;\n\n  if (!this.hasOwnProperty('key')) { return this; }   // Empty tree\n\n  // Either no match is found and the function will return from within the loop\n  // Or a match is found and deletePath will contain the path from the root to the node to delete after the loop\n  while (true) {\n    if (currentNode.compareKeys(key, currentNode.key) === 0) { break; }\n\n    deletePath.push(currentNode);\n\n    if (currentNode.compareKeys(key, currentNode.key) < 0) {\n      if (currentNode.left) {\n        currentNode = currentNode.left;\n      } else {\n        return this;   // Key not found, no modification\n      }\n    } else {\n      // currentNode.compareKeys(key, currentNode.key) is > 0\n      if (currentNode.right) {\n        currentNode = currentNode.right;\n      } else {\n        return this;   // Key not found, no modification\n      }\n    }\n  }\n\n  // Delete only a value (no tree modification)\n  if (currentNode.data.length > 1 && value !== undefined) {\n    currentNode.data.forEach(function (d) {\n      if (!currentNode.checkValueEquality(d, value)) { newData.push(d); }\n    });\n    currentNode.data = newData;\n    return this;\n  }\n\n  // Delete a whole node\n\n  // Leaf\n  if (!currentNode.left && !currentNode.right) {\n    if (currentNode === this) {   // This leaf is also the root\n      delete currentNode.key;\n      currentNode.data = [];\n      delete currentNode.height;\n      return this;\n    } else {\n      if (currentNode.parent.left === currentNode) {\n        currentNode.parent.left = null;\n      } else {\n        currentNode.parent.right = null;\n      }\n      return this.rebalanceAlongPath(deletePath);\n    }\n  }\n\n\n  // Node with only one child\n  if (!currentNode.left || !currentNode.right) {\n    replaceWith = currentNode.left ? currentNode.left : currentNode.right;\n\n    if (currentNode === this) {   // This node is also the root\n      replaceWith.parent = null;\n      return replaceWith;   // height of replaceWith is necessarily 1 because the tree was balanced before deletion\n    } else {\n      if (currentNode.parent.left === currentNode) {\n        currentNode.parent.left = replaceWith;\n        replaceWith.parent = currentNode.parent;\n      } else {\n        currentNode.parent.right = replaceWith;\n        replaceWith.parent = currentNode.parent;\n      }\n\n      return this.rebalanceAlongPath(deletePath);\n    }\n  }\n\n\n  // Node with two children\n  // Use the in-order predecessor (no need to randomize since we actively rebalance)\n  deletePath.push(currentNode);\n  replaceWith = currentNode.left;\n\n  // Special case: the in-order predecessor is right below the node to delete\n  if (!replaceWith.right) {\n    currentNode.key = replaceWith.key;\n    currentNode.data = replaceWith.data;\n    currentNode.left = replaceWith.left;\n    if (replaceWith.left) { replaceWith.left.parent = currentNode; }\n    return this.rebalanceAlongPath(deletePath);\n  }\n\n  // After this loop, replaceWith is the right-most leaf in the left subtree\n  // and deletePath the path from the root (inclusive) to replaceWith (exclusive)\n  while (true) {\n    if (replaceWith.right) {\n      deletePath.push(replaceWith);\n      replaceWith = replaceWith.right;\n    } else {\n      break;\n    }\n  }\n\n  currentNode.key = replaceWith.key;\n  currentNode.data = replaceWith.data;\n\n  replaceWith.parent.right = replaceWith.left;\n  if (replaceWith.left) { replaceWith.left.parent = replaceWith.parent; }\n\n  return this.rebalanceAlongPath(deletePath);\n};\n\n// Delete a value\nAVLTree.prototype.delete = function (key, value) {\n  var newTree = this.tree.delete(key, value);\n\n  // If newTree is undefined, that means its structure was not modified\n  if (newTree) { this.tree = newTree; }\n};\n\n\n/**\n * Other functions we want to use on an AVLTree as if it were the internal _AVLTree\n */\n['getNumberOfKeys', 'search', 'betweenBounds', 'prettyPrint', 'executeOnEveryNode'].forEach(function (fn) {\n  AVLTree.prototype[fn] = function () {\n    return this.tree[fn].apply(this.tree, arguments);\n  };\n});\n\n\n// Interface\nmodule.exports = AVLTree;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iaW5hcnktc2VhcmNoLXRyZWUvbGliL2F2bHRyZWUuanM/YTI1NiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFNlbGYtYmFsYW5jaW5nIGJpbmFyeSBzZWFyY2ggdHJlZSB1c2luZyB0aGUgQVZMIGltcGxlbWVudGF0aW9uXG4gKi9cbnZhciBCaW5hcnlTZWFyY2hUcmVlID0gcmVxdWlyZSgnLi9ic3QnKVxuICAsIGN1c3RvbVV0aWxzID0gcmVxdWlyZSgnLi9jdXN0b21VdGlscycpXG4gICwgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKVxuICAsIF8gPSByZXF1aXJlKCd1bmRlcnNjb3JlJylcbiAgO1xuXG5cbi8qKlxuICogQ29uc3RydWN0b3JcbiAqIFdlIGNhbid0IHVzZSBhIGRpcmVjdCBwb2ludGVyIHRvIHRoZSByb290IG5vZGUgKGFzIGluIHRoZSBzaW1wbGUgYmluYXJ5IHNlYXJjaCB0cmVlKVxuICogYXMgdGhlIHJvb3Qgd2lsbCBjaGFuZ2UgZHVyaW5nIHRyZWUgcm90YXRpb25zXG4gKiBAcGFyYW0ge0Jvb2xlYW59ICBvcHRpb25zLnVuaXF1ZSBXaGV0aGVyIHRvIGVuZm9yY2UgYSAndW5pcXVlJyBjb25zdHJhaW50IG9uIHRoZSBrZXkgb3Igbm90XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcHRpb25zLmNvbXBhcmVLZXlzIEluaXRpYWxpemUgdGhpcyBCU1QncyBjb21wYXJlS2V5c1xuICovXG5mdW5jdGlvbiBBVkxUcmVlIChvcHRpb25zKSB7XG4gIHRoaXMudHJlZSA9IG5ldyBfQVZMVHJlZShvcHRpb25zKTtcbn1cblxuXG4vKipcbiAqIENvbnN0cnVjdG9yIG9mIHRoZSBpbnRlcm5hbCBBVkxUcmVlXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBPcHRpb25hbFxuICogQHBhcmFtIHtCb29sZWFufSAgb3B0aW9ucy51bmlxdWUgV2hldGhlciB0byBlbmZvcmNlIGEgJ3VuaXF1ZScgY29uc3RyYWludCBvbiB0aGUga2V5IG9yIG5vdFxuICogQHBhcmFtIHtLZXl9ICAgICAgb3B0aW9ucy5rZXkgSW5pdGlhbGl6ZSB0aGlzIEJTVCdzIGtleSB3aXRoIGtleVxuICogQHBhcmFtIHtWYWx1ZX0gICAgb3B0aW9ucy52YWx1ZSBJbml0aWFsaXplIHRoaXMgQlNUJ3MgZGF0YSB3aXRoIFt2YWx1ZV1cbiAqIEBwYXJhbSB7RnVuY3Rpb259IG9wdGlvbnMuY29tcGFyZUtleXMgSW5pdGlhbGl6ZSB0aGlzIEJTVCdzIGNvbXBhcmVLZXlzXG4gKi9cbmZ1bmN0aW9uIF9BVkxUcmVlIChvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIHRoaXMubGVmdCA9IG51bGw7XG4gIHRoaXMucmlnaHQgPSBudWxsO1xuICB0aGlzLnBhcmVudCA9IG9wdGlvbnMucGFyZW50ICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLnBhcmVudCA6IG51bGw7XG4gIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KCdrZXknKSkgeyB0aGlzLmtleSA9IG9wdGlvbnMua2V5OyB9XG4gIHRoaXMuZGF0YSA9IG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ3ZhbHVlJykgPyBbb3B0aW9ucy52YWx1ZV0gOiBbXTtcbiAgdGhpcy51bmlxdWUgPSBvcHRpb25zLnVuaXF1ZSB8fCBmYWxzZTtcblxuICB0aGlzLmNvbXBhcmVLZXlzID0gb3B0aW9ucy5jb21wYXJlS2V5cyB8fCBjdXN0b21VdGlscy5kZWZhdWx0Q29tcGFyZUtleXNGdW5jdGlvbjtcbiAgdGhpcy5jaGVja1ZhbHVlRXF1YWxpdHkgPSBvcHRpb25zLmNoZWNrVmFsdWVFcXVhbGl0eSB8fCBjdXN0b21VdGlscy5kZWZhdWx0Q2hlY2tWYWx1ZUVxdWFsaXR5O1xufVxuXG5cbi8qKlxuICogSW5oZXJpdCBiYXNpYyBmdW5jdGlvbnMgZnJvbSB0aGUgYmFzaWMgYmluYXJ5IHNlYXJjaCB0cmVlXG4gKi9cbnV0aWwuaW5oZXJpdHMoX0FWTFRyZWUsIEJpbmFyeVNlYXJjaFRyZWUpO1xuXG4vKipcbiAqIEtlZXAgYSBwb2ludGVyIHRvIHRoZSBpbnRlcm5hbCB0cmVlIGNvbnN0cnVjdG9yIGZvciB0ZXN0aW5nIHB1cnBvc2VzXG4gKi9cbkFWTFRyZWUuX0FWTFRyZWUgPSBfQVZMVHJlZTtcblxuXG4vKipcbiAqIENoZWNrIHRoZSByZWNvcmRlZCBoZWlnaHQgaXMgY29ycmVjdCBmb3IgZXZlcnkgbm9kZVxuICogVGhyb3dzIGlmIG9uZSBoZWlnaHQgZG9lc24ndCBtYXRjaFxuICovXG5fQVZMVHJlZS5wcm90b3R5cGUuY2hlY2tIZWlnaHRDb3JyZWN0ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgbGVmdEgsIHJpZ2h0SDtcblxuICBpZiAoIXRoaXMuaGFzT3duUHJvcGVydHkoJ2tleScpKSB7IHJldHVybjsgfSAgIC8vIEVtcHR5IHRyZWVcblxuICBpZiAodGhpcy5sZWZ0ICYmIHRoaXMubGVmdC5oZWlnaHQgPT09IHVuZGVmaW5lZCkgeyB0aHJvdyBuZXcgRXJyb3IoXCJVbmRlZmluZWQgaGVpZ2h0IGZvciBub2RlIFwiICsgdGhpcy5sZWZ0LmtleSk7IH1cbiAgaWYgKHRoaXMucmlnaHQgJiYgdGhpcy5yaWdodC5oZWlnaHQgPT09IHVuZGVmaW5lZCkgeyB0aHJvdyBuZXcgRXJyb3IoXCJVbmRlZmluZWQgaGVpZ2h0IGZvciBub2RlIFwiICsgdGhpcy5yaWdodC5rZXkpOyB9XG4gIGlmICh0aGlzLmhlaWdodCA9PT0gdW5kZWZpbmVkKSB7IHRocm93IG5ldyBFcnJvcihcIlVuZGVmaW5lZCBoZWlnaHQgZm9yIG5vZGUgXCIgKyB0aGlzLmtleSk7IH1cblxuICBsZWZ0SCA9IHRoaXMubGVmdCA/IHRoaXMubGVmdC5oZWlnaHQgOiAwO1xuICByaWdodEggPSB0aGlzLnJpZ2h0ID8gdGhpcy5yaWdodC5oZWlnaHQgOiAwO1xuXG4gIGlmICh0aGlzLmhlaWdodCAhPT0gMSArIE1hdGgubWF4KGxlZnRILCByaWdodEgpKSB7IHRocm93IG5ldyBFcnJvcihcIkhlaWdodCBjb25zdHJhaW50IGZhaWxlZCBmb3Igbm9kZSBcIiArIHRoaXMua2V5KTsgfVxuICBpZiAodGhpcy5sZWZ0KSB7IHRoaXMubGVmdC5jaGVja0hlaWdodENvcnJlY3QoKTsgfVxuICBpZiAodGhpcy5yaWdodCkgeyB0aGlzLnJpZ2h0LmNoZWNrSGVpZ2h0Q29ycmVjdCgpOyB9XG59O1xuXG5cbi8qKlxuICogUmV0dXJuIHRoZSBiYWxhbmNlIGZhY3RvclxuICovXG5fQVZMVHJlZS5wcm90b3R5cGUuYmFsYW5jZUZhY3RvciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGxlZnRIID0gdGhpcy5sZWZ0ID8gdGhpcy5sZWZ0LmhlaWdodCA6IDBcbiAgICAsIHJpZ2h0SCA9IHRoaXMucmlnaHQgPyB0aGlzLnJpZ2h0LmhlaWdodCA6IDBcbiAgICA7XG4gIHJldHVybiBsZWZ0SCAtIHJpZ2h0SDtcbn07XG5cblxuLyoqXG4gKiBDaGVjayB0aGF0IHRoZSBiYWxhbmNlIGZhY3RvcnMgYXJlIGFsbCBiZXR3ZWVuIC0xIGFuZCAxXG4gKi9cbl9BVkxUcmVlLnByb3RvdHlwZS5jaGVja0JhbGFuY2VGYWN0b3JzID0gZnVuY3Rpb24gKCkge1xuICBpZiAoTWF0aC5hYnModGhpcy5iYWxhbmNlRmFjdG9yKCkpID4gMSkgeyB0aHJvdyBuZXcgRXJyb3IoJ1RyZWUgaXMgdW5iYWxhbmNlZCBhdCBub2RlICcgKyB0aGlzLmtleSk7IH1cblxuICBpZiAodGhpcy5sZWZ0KSB7IHRoaXMubGVmdC5jaGVja0JhbGFuY2VGYWN0b3JzKCk7IH1cbiAgaWYgKHRoaXMucmlnaHQpIHsgdGhpcy5yaWdodC5jaGVja0JhbGFuY2VGYWN0b3JzKCk7IH1cbn07XG5cblxuLyoqXG4gKiBXaGVuIGNoZWNraW5nIGlmIHRoZSBCU1QgY29uZGl0aW9ucyBhcmUgbWV0LCBhbHNvIGNoZWNrIHRoYXQgdGhlIGhlaWdodHMgYXJlIGNvcnJlY3RcbiAqIGFuZCB0aGUgdHJlZSBpcyBiYWxhbmNlZFxuICovXG5fQVZMVHJlZS5wcm90b3R5cGUuY2hlY2tJc0FWTFQgPSBmdW5jdGlvbiAoKSB7XG4gIF9BVkxUcmVlLnN1cGVyXy5wcm90b3R5cGUuY2hlY2tJc0JTVC5jYWxsKHRoaXMpO1xuICB0aGlzLmNoZWNrSGVpZ2h0Q29ycmVjdCgpO1xuICB0aGlzLmNoZWNrQmFsYW5jZUZhY3RvcnMoKTtcbn07XG5BVkxUcmVlLnByb3RvdHlwZS5jaGVja0lzQVZMVCA9IGZ1bmN0aW9uICgpIHsgdGhpcy50cmVlLmNoZWNrSXNBVkxUKCk7IH07XG5cblxuLyoqXG4gKiBQZXJmb3JtIGEgcmlnaHQgcm90YXRpb24gb2YgdGhlIHRyZWUgaWYgcG9zc2libGVcbiAqIGFuZCByZXR1cm4gdGhlIHJvb3Qgb2YgdGhlIHJlc3VsdGluZyB0cmVlXG4gKiBUaGUgcmVzdWx0aW5nIHRyZWUncyBub2RlcycgaGVpZ2h0cyBhcmUgYWxzbyB1cGRhdGVkXG4gKi9cbl9BVkxUcmVlLnByb3RvdHlwZS5yaWdodFJvdGF0aW9uID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcSA9IHRoaXNcbiAgICAsIHAgPSB0aGlzLmxlZnRcbiAgICAsIGJcbiAgICAsIGFoLCBiaCwgY2g7XG5cbiAgaWYgKCFwKSB7IHJldHVybiB0aGlzOyB9ICAgLy8gTm8gY2hhbmdlXG5cbiAgYiA9IHAucmlnaHQ7XG5cbiAgLy8gQWx0ZXIgdHJlZSBzdHJ1Y3R1cmVcbiAgaWYgKHEucGFyZW50KSB7XG4gICAgcC5wYXJlbnQgPSBxLnBhcmVudDtcbiAgICBpZiAocS5wYXJlbnQubGVmdCA9PT0gcSkgeyBxLnBhcmVudC5sZWZ0ID0gcDsgfSBlbHNlIHsgcS5wYXJlbnQucmlnaHQgPSBwOyB9XG4gIH0gZWxzZSB7XG4gICAgcC5wYXJlbnQgPSBudWxsO1xuICB9XG4gIHAucmlnaHQgPSBxO1xuICBxLnBhcmVudCA9IHA7XG4gIHEubGVmdCA9IGI7XG4gIGlmIChiKSB7IGIucGFyZW50ID0gcTsgfVxuXG4gIC8vIFVwZGF0ZSBoZWlnaHRzXG4gIGFoID0gcC5sZWZ0ID8gcC5sZWZ0LmhlaWdodCA6IDA7XG4gIGJoID0gYiA/IGIuaGVpZ2h0IDogMDtcbiAgY2ggPSBxLnJpZ2h0ID8gcS5yaWdodC5oZWlnaHQgOiAwO1xuICBxLmhlaWdodCA9IE1hdGgubWF4KGJoLCBjaCkgKyAxO1xuICBwLmhlaWdodCA9IE1hdGgubWF4KGFoLCBxLmhlaWdodCkgKyAxO1xuXG4gIHJldHVybiBwO1xufTtcblxuXG4vKipcbiAqIFBlcmZvcm0gYSBsZWZ0IHJvdGF0aW9uIG9mIHRoZSB0cmVlIGlmIHBvc3NpYmxlXG4gKiBhbmQgcmV0dXJuIHRoZSByb290IG9mIHRoZSByZXN1bHRpbmcgdHJlZVxuICogVGhlIHJlc3VsdGluZyB0cmVlJ3Mgbm9kZXMnIGhlaWdodHMgYXJlIGFsc28gdXBkYXRlZFxuICovXG5fQVZMVHJlZS5wcm90b3R5cGUubGVmdFJvdGF0aW9uID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcCA9IHRoaXNcbiAgICAsIHEgPSB0aGlzLnJpZ2h0XG4gICAgLCBiXG4gICAgLCBhaCwgYmgsIGNoO1xuXG4gIGlmICghcSkgeyByZXR1cm4gdGhpczsgfSAgIC8vIE5vIGNoYW5nZVxuXG4gIGIgPSBxLmxlZnQ7XG5cbiAgLy8gQWx0ZXIgdHJlZSBzdHJ1Y3R1cmVcbiAgaWYgKHAucGFyZW50KSB7XG4gICAgcS5wYXJlbnQgPSBwLnBhcmVudDtcbiAgICBpZiAocC5wYXJlbnQubGVmdCA9PT0gcCkgeyBwLnBhcmVudC5sZWZ0ID0gcTsgfSBlbHNlIHsgcC5wYXJlbnQucmlnaHQgPSBxOyB9XG4gIH0gZWxzZSB7XG4gICAgcS5wYXJlbnQgPSBudWxsO1xuICB9XG4gIHEubGVmdCA9IHA7XG4gIHAucGFyZW50ID0gcTtcbiAgcC5yaWdodCA9IGI7XG4gIGlmIChiKSB7IGIucGFyZW50ID0gcDsgfVxuXG4gIC8vIFVwZGF0ZSBoZWlnaHRzXG4gIGFoID0gcC5sZWZ0ID8gcC5sZWZ0LmhlaWdodCA6IDA7XG4gIGJoID0gYiA/IGIuaGVpZ2h0IDogMDtcbiAgY2ggPSBxLnJpZ2h0ID8gcS5yaWdodC5oZWlnaHQgOiAwO1xuICBwLmhlaWdodCA9IE1hdGgubWF4KGFoLCBiaCkgKyAxO1xuICBxLmhlaWdodCA9IE1hdGgubWF4KGNoLCBwLmhlaWdodCkgKyAxO1xuXG4gIHJldHVybiBxO1xufTtcblxuXG4vKipcbiAqIE1vZGlmeSB0aGUgdHJlZSBpZiBpdHMgcmlnaHQgc3VidHJlZSBpcyB0b28gc21hbGwgY29tcGFyZWQgdG8gdGhlIGxlZnRcbiAqIFJldHVybiB0aGUgbmV3IHJvb3QgaWYgYW55XG4gKi9cbl9BVkxUcmVlLnByb3RvdHlwZS5yaWdodFRvb1NtYWxsID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5iYWxhbmNlRmFjdG9yKCkgPD0gMSkgeyByZXR1cm4gdGhpczsgfSAgIC8vIFJpZ2h0IGlzIG5vdCB0b28gc21hbGwsIGRvbid0IGNoYW5nZVxuXG4gIGlmICh0aGlzLmxlZnQuYmFsYW5jZUZhY3RvcigpIDwgMCkge1xuICAgIHRoaXMubGVmdC5sZWZ0Um90YXRpb24oKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLnJpZ2h0Um90YXRpb24oKTtcbn07XG5cblxuLyoqXG4gKiBNb2RpZnkgdGhlIHRyZWUgaWYgaXRzIGxlZnQgc3VidHJlZSBpcyB0b28gc21hbGwgY29tcGFyZWQgdG8gdGhlIHJpZ2h0XG4gKiBSZXR1cm4gdGhlIG5ldyByb290IGlmIGFueVxuICovXG5fQVZMVHJlZS5wcm90b3R5cGUubGVmdFRvb1NtYWxsID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5iYWxhbmNlRmFjdG9yKCkgPj0gLTEpIHsgcmV0dXJuIHRoaXM7IH0gICAvLyBMZWZ0IGlzIG5vdCB0b28gc21hbGwsIGRvbid0IGNoYW5nZVxuXG4gIGlmICh0aGlzLnJpZ2h0LmJhbGFuY2VGYWN0b3IoKSA+IDApIHtcbiAgICB0aGlzLnJpZ2h0LnJpZ2h0Um90YXRpb24oKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmxlZnRSb3RhdGlvbigpO1xufTtcblxuXG4vKipcbiAqIFJlYmFsYW5jZSB0aGUgdHJlZSBhbG9uZyB0aGUgZ2l2ZW4gcGF0aC4gVGhlIHBhdGggaXMgZ2l2ZW4gcmV2ZXJzZWQgKGFzIGhlIHdhcyBjYWxjdWxhdGVkXG4gKiBpbiB0aGUgaW5zZXJ0IGFuZCBkZWxldGUgZnVuY3Rpb25zKS5cbiAqIFJldHVybnMgdGhlIG5ldyByb290IG9mIHRoZSB0cmVlXG4gKiBPZiBjb3Vyc2UsIHRoZSBmaXJzdCBlbGVtZW50IG9mIHRoZSBwYXRoIG11c3QgYmUgdGhlIHJvb3Qgb2YgdGhlIHRyZWVcbiAqL1xuX0FWTFRyZWUucHJvdG90eXBlLnJlYmFsYW5jZUFsb25nUGF0aCA9IGZ1bmN0aW9uIChwYXRoKSB7XG4gIHZhciBuZXdSb290ID0gdGhpc1xuICAgICwgcm90YXRlZFxuICAgICwgaTtcblxuICBpZiAoIXRoaXMuaGFzT3duUHJvcGVydHkoJ2tleScpKSB7IGRlbGV0ZSB0aGlzLmhlaWdodDsgcmV0dXJuIHRoaXM7IH0gICAvLyBFbXB0eSB0cmVlXG5cbiAgLy8gUmViYWxhbmNlIHRoZSB0cmVlIGFuZCB1cGRhdGUgYWxsIGhlaWdodHNcbiAgZm9yIChpID0gcGF0aC5sZW5ndGggLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgIHBhdGhbaV0uaGVpZ2h0ID0gMSArIE1hdGgubWF4KHBhdGhbaV0ubGVmdCA/IHBhdGhbaV0ubGVmdC5oZWlnaHQgOiAwLCBwYXRoW2ldLnJpZ2h0ID8gcGF0aFtpXS5yaWdodC5oZWlnaHQgOiAwKTtcblxuICAgIGlmIChwYXRoW2ldLmJhbGFuY2VGYWN0b3IoKSA+IDEpIHtcbiAgICAgIHJvdGF0ZWQgPSBwYXRoW2ldLnJpZ2h0VG9vU21hbGwoKTtcbiAgICAgIGlmIChpID09PSAwKSB7IG5ld1Jvb3QgPSByb3RhdGVkOyB9XG4gICAgfVxuXG4gICAgaWYgKHBhdGhbaV0uYmFsYW5jZUZhY3RvcigpIDwgLTEpIHtcbiAgICAgIHJvdGF0ZWQgPSBwYXRoW2ldLmxlZnRUb29TbWFsbCgpO1xuICAgICAgaWYgKGkgPT09IDApIHsgbmV3Um9vdCA9IHJvdGF0ZWQ7IH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3Um9vdDtcbn07XG5cblxuLyoqXG4gKiBJbnNlcnQgYSBrZXksIHZhbHVlIHBhaXIgaW4gdGhlIHRyZWUgd2hpbGUgbWFpbnRhaW5pbmcgdGhlIEFWTCB0cmVlIGhlaWdodCBjb25zdHJhaW50XG4gKiBSZXR1cm4gYSBwb2ludGVyIHRvIHRoZSByb290IG5vZGUsIHdoaWNoIG1heSBoYXZlIGNoYW5nZWRcbiAqL1xuX0FWTFRyZWUucHJvdG90eXBlLmluc2VydCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHZhciBpbnNlcnRQYXRoID0gW11cbiAgICAsIGN1cnJlbnROb2RlID0gdGhpc1xuICAgIDtcblxuICAvLyBFbXB0eSB0cmVlLCBpbnNlcnQgYXMgcm9vdFxuICBpZiAoIXRoaXMuaGFzT3duUHJvcGVydHkoJ2tleScpKSB7XG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy5kYXRhLnB1c2godmFsdWUpO1xuICAgIHRoaXMuaGVpZ2h0ID0gMTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIEluc2VydCBuZXcgbGVhZiBhdCB0aGUgcmlnaHQgcGxhY2VcbiAgd2hpbGUgKHRydWUpIHtcbiAgICAvLyBTYW1lIGtleTogbm8gY2hhbmdlIGluIHRoZSB0cmVlIHN0cnVjdHVyZVxuICAgIGlmIChjdXJyZW50Tm9kZS5jb21wYXJlS2V5cyhjdXJyZW50Tm9kZS5rZXksIGtleSkgPT09IDApIHtcbiAgICAgIGlmIChjdXJyZW50Tm9kZS51bmlxdWUpIHtcbiAgICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcihcIkNhbid0IGluc2VydCBrZXkgXCIgKyBrZXkgKyBcIiwgaXQgdmlvbGF0ZXMgdGhlIHVuaXF1ZSBjb25zdHJhaW50XCIpO1xuICAgICAgICBlcnIua2V5ID0ga2V5O1xuICAgICAgICBlcnIuZXJyb3JUeXBlID0gJ3VuaXF1ZVZpb2xhdGVkJztcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3VycmVudE5vZGUuZGF0YS5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGluc2VydFBhdGgucHVzaChjdXJyZW50Tm9kZSk7XG5cbiAgICBpZiAoY3VycmVudE5vZGUuY29tcGFyZUtleXMoa2V5LCBjdXJyZW50Tm9kZS5rZXkpIDwgMCkge1xuICAgICAgaWYgKCFjdXJyZW50Tm9kZS5sZWZ0KSB7XG4gICAgICAgIGluc2VydFBhdGgucHVzaChjdXJyZW50Tm9kZS5jcmVhdGVMZWZ0Q2hpbGQoeyBrZXk6IGtleSwgdmFsdWU6IHZhbHVlIH0pKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdXJyZW50Tm9kZSA9IGN1cnJlbnROb2RlLmxlZnQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghY3VycmVudE5vZGUucmlnaHQpIHtcbiAgICAgICAgaW5zZXJ0UGF0aC5wdXNoKGN1cnJlbnROb2RlLmNyZWF0ZVJpZ2h0Q2hpbGQoeyBrZXk6IGtleSwgdmFsdWU6IHZhbHVlIH0pKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdXJyZW50Tm9kZSA9IGN1cnJlbnROb2RlLnJpZ2h0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzLnJlYmFsYW5jZUFsb25nUGF0aChpbnNlcnRQYXRoKTtcbn07XG5cbi8vIEluc2VydCBpbiB0aGUgaW50ZXJuYWwgdHJlZSwgdXBkYXRlIHRoZSBwb2ludGVyIHRvIHRoZSByb290IGlmIG5lZWRlZFxuQVZMVHJlZS5wcm90b3R5cGUuaW5zZXJ0ID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgdmFyIG5ld1RyZWUgPSB0aGlzLnRyZWUuaW5zZXJ0KGtleSwgdmFsdWUpO1xuXG4gIC8vIElmIG5ld1RyZWUgaXMgdW5kZWZpbmVkLCB0aGF0IG1lYW5zIGl0cyBzdHJ1Y3R1cmUgd2FzIG5vdCBtb2RpZmllZFxuICBpZiAobmV3VHJlZSkgeyB0aGlzLnRyZWUgPSBuZXdUcmVlOyB9XG59O1xuXG5cbi8qKlxuICogRGVsZXRlIGEga2V5IG9yIGp1c3QgYSB2YWx1ZSBhbmQgcmV0dXJuIHRoZSBuZXcgcm9vdCBvZiB0aGUgdHJlZVxuICogQHBhcmFtIHtLZXl9IGtleVxuICogQHBhcmFtIHtWYWx1ZX0gdmFsdWUgT3B0aW9uYWwuIElmIG5vdCBzZXQsIHRoZSB3aG9sZSBrZXkgaXMgZGVsZXRlZC4gSWYgc2V0LCBvbmx5IHRoaXMgdmFsdWUgaXMgZGVsZXRlZFxuICovXG5fQVZMVHJlZS5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgdmFyIG5ld0RhdGEgPSBbXSwgcmVwbGFjZVdpdGhcbiAgICAsIHNlbGYgPSB0aGlzXG4gICAgLCBjdXJyZW50Tm9kZSA9IHRoaXNcbiAgICAsIGRlbGV0ZVBhdGggPSBbXVxuICAgIDtcblxuICBpZiAoIXRoaXMuaGFzT3duUHJvcGVydHkoJ2tleScpKSB7IHJldHVybiB0aGlzOyB9ICAgLy8gRW1wdHkgdHJlZVxuXG4gIC8vIEVpdGhlciBubyBtYXRjaCBpcyBmb3VuZCBhbmQgdGhlIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIGZyb20gd2l0aGluIHRoZSBsb29wXG4gIC8vIE9yIGEgbWF0Y2ggaXMgZm91bmQgYW5kIGRlbGV0ZVBhdGggd2lsbCBjb250YWluIHRoZSBwYXRoIGZyb20gdGhlIHJvb3QgdG8gdGhlIG5vZGUgdG8gZGVsZXRlIGFmdGVyIHRoZSBsb29wXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgaWYgKGN1cnJlbnROb2RlLmNvbXBhcmVLZXlzKGtleSwgY3VycmVudE5vZGUua2V5KSA9PT0gMCkgeyBicmVhazsgfVxuXG4gICAgZGVsZXRlUGF0aC5wdXNoKGN1cnJlbnROb2RlKTtcblxuICAgIGlmIChjdXJyZW50Tm9kZS5jb21wYXJlS2V5cyhrZXksIGN1cnJlbnROb2RlLmtleSkgPCAwKSB7XG4gICAgICBpZiAoY3VycmVudE5vZGUubGVmdCkge1xuICAgICAgICBjdXJyZW50Tm9kZSA9IGN1cnJlbnROb2RlLmxlZnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpczsgICAvLyBLZXkgbm90IGZvdW5kLCBubyBtb2RpZmljYXRpb25cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gY3VycmVudE5vZGUuY29tcGFyZUtleXMoa2V5LCBjdXJyZW50Tm9kZS5rZXkpIGlzID4gMFxuICAgICAgaWYgKGN1cnJlbnROb2RlLnJpZ2h0KSB7XG4gICAgICAgIGN1cnJlbnROb2RlID0gY3VycmVudE5vZGUucmlnaHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpczsgICAvLyBLZXkgbm90IGZvdW5kLCBubyBtb2RpZmljYXRpb25cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBEZWxldGUgb25seSBhIHZhbHVlIChubyB0cmVlIG1vZGlmaWNhdGlvbilcbiAgaWYgKGN1cnJlbnROb2RlLmRhdGEubGVuZ3RoID4gMSAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY3VycmVudE5vZGUuZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChkKSB7XG4gICAgICBpZiAoIWN1cnJlbnROb2RlLmNoZWNrVmFsdWVFcXVhbGl0eShkLCB2YWx1ZSkpIHsgbmV3RGF0YS5wdXNoKGQpOyB9XG4gICAgfSk7XG4gICAgY3VycmVudE5vZGUuZGF0YSA9IG5ld0RhdGE7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyBEZWxldGUgYSB3aG9sZSBub2RlXG5cbiAgLy8gTGVhZlxuICBpZiAoIWN1cnJlbnROb2RlLmxlZnQgJiYgIWN1cnJlbnROb2RlLnJpZ2h0KSB7XG4gICAgaWYgKGN1cnJlbnROb2RlID09PSB0aGlzKSB7ICAgLy8gVGhpcyBsZWFmIGlzIGFsc28gdGhlIHJvb3RcbiAgICAgIGRlbGV0ZSBjdXJyZW50Tm9kZS5rZXk7XG4gICAgICBjdXJyZW50Tm9kZS5kYXRhID0gW107XG4gICAgICBkZWxldGUgY3VycmVudE5vZGUuaGVpZ2h0O1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChjdXJyZW50Tm9kZS5wYXJlbnQubGVmdCA9PT0gY3VycmVudE5vZGUpIHtcbiAgICAgICAgY3VycmVudE5vZGUucGFyZW50LmxlZnQgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3VycmVudE5vZGUucGFyZW50LnJpZ2h0ID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnJlYmFsYW5jZUFsb25nUGF0aChkZWxldGVQYXRoKTtcbiAgICB9XG4gIH1cblxuXG4gIC8vIE5vZGUgd2l0aCBvbmx5IG9uZSBjaGlsZFxuICBpZiAoIWN1cnJlbnROb2RlLmxlZnQgfHwgIWN1cnJlbnROb2RlLnJpZ2h0KSB7XG4gICAgcmVwbGFjZVdpdGggPSBjdXJyZW50Tm9kZS5sZWZ0ID8gY3VycmVudE5vZGUubGVmdCA6IGN1cnJlbnROb2RlLnJpZ2h0O1xuXG4gICAgaWYgKGN1cnJlbnROb2RlID09PSB0aGlzKSB7ICAgLy8gVGhpcyBub2RlIGlzIGFsc28gdGhlIHJvb3RcbiAgICAgIHJlcGxhY2VXaXRoLnBhcmVudCA9IG51bGw7XG4gICAgICByZXR1cm4gcmVwbGFjZVdpdGg7ICAgLy8gaGVpZ2h0IG9mIHJlcGxhY2VXaXRoIGlzIG5lY2Vzc2FyaWx5IDEgYmVjYXVzZSB0aGUgdHJlZSB3YXMgYmFsYW5jZWQgYmVmb3JlIGRlbGV0aW9uXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChjdXJyZW50Tm9kZS5wYXJlbnQubGVmdCA9PT0gY3VycmVudE5vZGUpIHtcbiAgICAgICAgY3VycmVudE5vZGUucGFyZW50LmxlZnQgPSByZXBsYWNlV2l0aDtcbiAgICAgICAgcmVwbGFjZVdpdGgucGFyZW50ID0gY3VycmVudE5vZGUucGFyZW50O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3VycmVudE5vZGUucGFyZW50LnJpZ2h0ID0gcmVwbGFjZVdpdGg7XG4gICAgICAgIHJlcGxhY2VXaXRoLnBhcmVudCA9IGN1cnJlbnROb2RlLnBhcmVudDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucmViYWxhbmNlQWxvbmdQYXRoKGRlbGV0ZVBhdGgpO1xuICAgIH1cbiAgfVxuXG5cbiAgLy8gTm9kZSB3aXRoIHR3byBjaGlsZHJlblxuICAvLyBVc2UgdGhlIGluLW9yZGVyIHByZWRlY2Vzc29yIChubyBuZWVkIHRvIHJhbmRvbWl6ZSBzaW5jZSB3ZSBhY3RpdmVseSByZWJhbGFuY2UpXG4gIGRlbGV0ZVBhdGgucHVzaChjdXJyZW50Tm9kZSk7XG4gIHJlcGxhY2VXaXRoID0gY3VycmVudE5vZGUubGVmdDtcblxuICAvLyBTcGVjaWFsIGNhc2U6IHRoZSBpbi1vcmRlciBwcmVkZWNlc3NvciBpcyByaWdodCBiZWxvdyB0aGUgbm9kZSB0byBkZWxldGVcbiAgaWYgKCFyZXBsYWNlV2l0aC5yaWdodCkge1xuICAgIGN1cnJlbnROb2RlLmtleSA9IHJlcGxhY2VXaXRoLmtleTtcbiAgICBjdXJyZW50Tm9kZS5kYXRhID0gcmVwbGFjZVdpdGguZGF0YTtcbiAgICBjdXJyZW50Tm9kZS5sZWZ0ID0gcmVwbGFjZVdpdGgubGVmdDtcbiAgICBpZiAocmVwbGFjZVdpdGgubGVmdCkgeyByZXBsYWNlV2l0aC5sZWZ0LnBhcmVudCA9IGN1cnJlbnROb2RlOyB9XG4gICAgcmV0dXJuIHRoaXMucmViYWxhbmNlQWxvbmdQYXRoKGRlbGV0ZVBhdGgpO1xuICB9XG5cbiAgLy8gQWZ0ZXIgdGhpcyBsb29wLCByZXBsYWNlV2l0aCBpcyB0aGUgcmlnaHQtbW9zdCBsZWFmIGluIHRoZSBsZWZ0IHN1YnRyZWVcbiAgLy8gYW5kIGRlbGV0ZVBhdGggdGhlIHBhdGggZnJvbSB0aGUgcm9vdCAoaW5jbHVzaXZlKSB0byByZXBsYWNlV2l0aCAoZXhjbHVzaXZlKVxuICB3aGlsZSAodHJ1ZSkge1xuICAgIGlmIChyZXBsYWNlV2l0aC5yaWdodCkge1xuICAgICAgZGVsZXRlUGF0aC5wdXNoKHJlcGxhY2VXaXRoKTtcbiAgICAgIHJlcGxhY2VXaXRoID0gcmVwbGFjZVdpdGgucmlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGN1cnJlbnROb2RlLmtleSA9IHJlcGxhY2VXaXRoLmtleTtcbiAgY3VycmVudE5vZGUuZGF0YSA9IHJlcGxhY2VXaXRoLmRhdGE7XG5cbiAgcmVwbGFjZVdpdGgucGFyZW50LnJpZ2h0ID0gcmVwbGFjZVdpdGgubGVmdDtcbiAgaWYgKHJlcGxhY2VXaXRoLmxlZnQpIHsgcmVwbGFjZVdpdGgubGVmdC5wYXJlbnQgPSByZXBsYWNlV2l0aC5wYXJlbnQ7IH1cblxuICByZXR1cm4gdGhpcy5yZWJhbGFuY2VBbG9uZ1BhdGgoZGVsZXRlUGF0aCk7XG59O1xuXG4vLyBEZWxldGUgYSB2YWx1ZVxuQVZMVHJlZS5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgdmFyIG5ld1RyZWUgPSB0aGlzLnRyZWUuZGVsZXRlKGtleSwgdmFsdWUpO1xuXG4gIC8vIElmIG5ld1RyZWUgaXMgdW5kZWZpbmVkLCB0aGF0IG1lYW5zIGl0cyBzdHJ1Y3R1cmUgd2FzIG5vdCBtb2RpZmllZFxuICBpZiAobmV3VHJlZSkgeyB0aGlzLnRyZWUgPSBuZXdUcmVlOyB9XG59O1xuXG5cbi8qKlxuICogT3RoZXIgZnVuY3Rpb25zIHdlIHdhbnQgdG8gdXNlIG9uIGFuIEFWTFRyZWUgYXMgaWYgaXQgd2VyZSB0aGUgaW50ZXJuYWwgX0FWTFRyZWVcbiAqL1xuWydnZXROdW1iZXJPZktleXMnLCAnc2VhcmNoJywgJ2JldHdlZW5Cb3VuZHMnLCAncHJldHR5UHJpbnQnLCAnZXhlY3V0ZU9uRXZlcnlOb2RlJ10uZm9yRWFjaChmdW5jdGlvbiAoZm4pIHtcbiAgQVZMVHJlZS5wcm90b3R5cGVbZm5dID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnRyZWVbZm5dLmFwcGx5KHRoaXMudHJlZSwgYXJndW1lbnRzKTtcbiAgfTtcbn0pO1xuXG5cbi8vIEludGVyZmFjZVxubW9kdWxlLmV4cG9ydHMgPSBBVkxUcmVlO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5\n")},function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||\n  function getOwnPropertyDescriptors(obj) {\n    var keys = Object.keys(obj);\n    var descriptors = {};\n    for (var i = 0; i < keys.length; i++) {\n      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);\n    }\n    return descriptors;\n  };\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  if (typeof process !== 'undefined' && process.noDeprecation === true) {\n    return fn;\n  }\n\n  // Allow for deprecating things in the process of starting up.\n  if (typeof process === 'undefined') {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = __webpack_require__(8);\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = __webpack_require__(9);\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nvar kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;\n\nexports.promisify = function promisify(original) {\n  if (typeof original !== 'function')\n    throw new TypeError('The \"original\" argument must be of type Function');\n\n  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {\n    var fn = original[kCustomPromisifiedSymbol];\n    if (typeof fn !== 'function') {\n      throw new TypeError('The \"util.promisify.custom\" argument must be of type Function');\n    }\n    Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n      value: fn, enumerable: false, writable: false, configurable: true\n    });\n    return fn;\n  }\n\n  function fn() {\n    var promiseResolve, promiseReject;\n    var promise = new Promise(function (resolve, reject) {\n      promiseResolve = resolve;\n      promiseReject = reject;\n    });\n\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n    args.push(function (err, value) {\n      if (err) {\n        promiseReject(err);\n      } else {\n        promiseResolve(value);\n      }\n    });\n\n    try {\n      original.apply(this, args);\n    } catch (err) {\n      promiseReject(err);\n    }\n\n    return promise;\n  }\n\n  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));\n\n  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n    value: fn, enumerable: false, writable: false, configurable: true\n  });\n  return Object.defineProperties(\n    fn,\n    getOwnPropertyDescriptors(original)\n  );\n}\n\nexports.promisify.custom = kCustomPromisifiedSymbol\n\nfunction callbackifyOnRejected(reason, cb) {\n  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).\n  // Because `null` is a special error value in callbacks which means \"no error\n  // occurred\", we error-wrap so the callback consumer can distinguish between\n  // \"the promise rejected with null\" or \"the promise fulfilled with undefined\".\n  if (!reason) {\n    var newReason = new Error('Promise was rejected with a falsy value');\n    newReason.reason = reason;\n    reason = newReason;\n  }\n  return cb(reason);\n}\n\nfunction callbackify(original) {\n  if (typeof original !== 'function') {\n    throw new TypeError('The \"original\" argument must be of type Function');\n  }\n\n  // We DO NOT return the promise as it gives the user a false sense that\n  // the promise is actually somehow related to the callback's execution\n  // and that the callback throwing will reject the promise.\n  function callbackified() {\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n\n    var maybeCb = args.pop();\n    if (typeof maybeCb !== 'function') {\n      throw new TypeError('The last argument must be of type Function');\n    }\n    var self = this;\n    var cb = function() {\n      return maybeCb.apply(self, arguments);\n    };\n    // In true node style we process the callback on `nextTick` with all the\n    // implications (stack, `uncaughtException`, `async_hooks`)\n    original.apply(this, args)\n      .then(function(ret) { process.nextTick(cb, null, ret) },\n            function(rej) { process.nextTick(callbackifyOnRejected, rej, cb) });\n  }\n\n  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));\n  Object.defineProperties(callbackified,\n                          getOwnPropertyDescriptors(original));\n  return callbackified;\n}\nexports.callbackify = callbackify;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(7)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n")},function(module,exports){eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n")},function(module,exports){eval("module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91dGlsL3N1cHBvcnQvaXNCdWZmZXJCcm93c2VyLmpzP2Q2MGEiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0J1ZmZlcihhcmcpIHtcbiAgcmV0dXJuIGFyZyAmJiB0eXBlb2YgYXJnID09PSAnb2JqZWN0J1xuICAgICYmIHR5cGVvZiBhcmcuY29weSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcuZmlsbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcucmVhZFVJbnQ4ID09PSAnZnVuY3Rpb24nO1xufSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8\n")},function(module,exports){eval("if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbmhlcml0cy9pbmhlcml0c19icm93c2VyLmpzPzNmYjUiXSwic291cmNlc0NvbnRlbnQiOlsiaWYgKHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gIC8vIGltcGxlbWVudGF0aW9uIGZyb20gc3RhbmRhcmQgbm9kZS5qcyAndXRpbCcgbW9kdWxlXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IGN0b3IsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gIH07XG59IGVsc2Uge1xuICAvLyBvbGQgc2Nob29sIHNoaW0gZm9yIG9sZCBicm93c2Vyc1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge31cbiAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlXG4gICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKVxuICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvclxuICB9XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9\n")},function(module,exports,__webpack_require__){eval("//     Underscore.js 1.4.4\n//     http://underscorejs.org\n//     (c) 2009-2013 Jeremy Ashkenas, DocumentCloud Inc.\n//     Underscore may be freely distributed under the MIT license.\n\n(function() {\n\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` in the browser, or `global` on the server.\n  var root = this;\n\n  // Save the previous value of the `_` variable.\n  var previousUnderscore = root._;\n\n  // Establish the object that gets returned to break out of a loop iteration.\n  var breaker = {};\n\n  // Save bytes in the minified (but not gzipped) version:\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;\n\n  // Create quick reference variables for speed access to core prototypes.\n  var push             = ArrayProto.push,\n      slice            = ArrayProto.slice,\n      concat           = ArrayProto.concat,\n      toString         = ObjProto.toString,\n      hasOwnProperty   = ObjProto.hasOwnProperty;\n\n  // All **ECMAScript 5** native function implementations that we hope to use\n  // are declared here.\n  var\n    nativeForEach      = ArrayProto.forEach,\n    nativeMap          = ArrayProto.map,\n    nativeReduce       = ArrayProto.reduce,\n    nativeReduceRight  = ArrayProto.reduceRight,\n    nativeFilter       = ArrayProto.filter,\n    nativeEvery        = ArrayProto.every,\n    nativeSome         = ArrayProto.some,\n    nativeIndexOf      = ArrayProto.indexOf,\n    nativeLastIndexOf  = ArrayProto.lastIndexOf,\n    nativeIsArray      = Array.isArray,\n    nativeKeys         = Object.keys,\n    nativeBind         = FuncProto.bind;\n\n  // Create a safe reference to the Underscore object for use below.\n  var _ = function(obj) {\n    if (obj instanceof _) return obj;\n    if (!(this instanceof _)) return new _(obj);\n    this._wrapped = obj;\n  };\n\n  // Export the Underscore object for **Node.js**, with\n  // backwards-compatibility for the old `require()` API. If we're in\n  // the browser, add `_` as a global object via a string identifier,\n  // for Closure Compiler \"advanced\" mode.\n  if (true) {\n    if ( true && module.exports) {\n      exports = module.exports = _;\n    }\n    exports._ = _;\n  } else {}\n\n  // Current version.\n  _.VERSION = '1.4.4';\n\n  // Collection Functions\n  // --------------------\n\n  // The cornerstone, an `each` implementation, aka `forEach`.\n  // Handles objects with the built-in `forEach`, arrays, and raw objects.\n  // Delegates to **ECMAScript 5**'s native `forEach` if available.\n  var each = _.each = _.forEach = function(obj, iterator, context) {\n    if (obj == null) return;\n    if (nativeForEach && obj.forEach === nativeForEach) {\n      obj.forEach(iterator, context);\n    } else if (obj.length === +obj.length) {\n      for (var i = 0, l = obj.length; i < l; i++) {\n        if (iterator.call(context, obj[i], i, obj) === breaker) return;\n      }\n    } else {\n      for (var key in obj) {\n        if (_.has(obj, key)) {\n          if (iterator.call(context, obj[key], key, obj) === breaker) return;\n        }\n      }\n    }\n  };\n\n  // Return the results of applying the iterator to each element.\n  // Delegates to **ECMAScript 5**'s native `map` if available.\n  _.map = _.collect = function(obj, iterator, context) {\n    var results = [];\n    if (obj == null) return results;\n    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);\n    each(obj, function(value, index, list) {\n      results[results.length] = iterator.call(context, value, index, list);\n    });\n    return results;\n  };\n\n  var reduceError = 'Reduce of empty array with no initial value';\n\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.\n  _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {\n    var initial = arguments.length > 2;\n    if (obj == null) obj = [];\n    if (nativeReduce && obj.reduce === nativeReduce) {\n      if (context) iterator = _.bind(iterator, context);\n      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);\n    }\n    each(obj, function(value, index, list) {\n      if (!initial) {\n        memo = value;\n        initial = true;\n      } else {\n        memo = iterator.call(context, memo, value, index, list);\n      }\n    });\n    if (!initial) throw new TypeError(reduceError);\n    return memo;\n  };\n\n  // The right-associative version of reduce, also known as `foldr`.\n  // Delegates to **ECMAScript 5**'s native `reduceRight` if available.\n  _.reduceRight = _.foldr = function(obj, iterator, memo, context) {\n    var initial = arguments.length > 2;\n    if (obj == null) obj = [];\n    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {\n      if (context) iterator = _.bind(iterator, context);\n      return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);\n    }\n    var length = obj.length;\n    if (length !== +length) {\n      var keys = _.keys(obj);\n      length = keys.length;\n    }\n    each(obj, function(value, index, list) {\n      index = keys ? keys[--length] : --length;\n      if (!initial) {\n        memo = obj[index];\n        initial = true;\n      } else {\n        memo = iterator.call(context, memo, obj[index], index, list);\n      }\n    });\n    if (!initial) throw new TypeError(reduceError);\n    return memo;\n  };\n\n  // Return the first value which passes a truth test. Aliased as `detect`.\n  _.find = _.detect = function(obj, iterator, context) {\n    var result;\n    any(obj, function(value, index, list) {\n      if (iterator.call(context, value, index, list)) {\n        result = value;\n        return true;\n      }\n    });\n    return result;\n  };\n\n  // Return all the elements that pass a truth test.\n  // Delegates to **ECMAScript 5**'s native `filter` if available.\n  // Aliased as `select`.\n  _.filter = _.select = function(obj, iterator, context) {\n    var results = [];\n    if (obj == null) return results;\n    if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context);\n    each(obj, function(value, index, list) {\n      if (iterator.call(context, value, index, list)) results[results.length] = value;\n    });\n    return results;\n  };\n\n  // Return all the elements for which a truth test fails.\n  _.reject = function(obj, iterator, context) {\n    return _.filter(obj, function(value, index, list) {\n      return !iterator.call(context, value, index, list);\n    }, context);\n  };\n\n  // Determine whether all of the elements match a truth test.\n  // Delegates to **ECMAScript 5**'s native `every` if available.\n  // Aliased as `all`.\n  _.every = _.all = function(obj, iterator, context) {\n    iterator || (iterator = _.identity);\n    var result = true;\n    if (obj == null) return result;\n    if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context);\n    each(obj, function(value, index, list) {\n      if (!(result = result && iterator.call(context, value, index, list))) return breaker;\n    });\n    return !!result;\n  };\n\n  // Determine if at least one element in the object matches a truth test.\n  // Delegates to **ECMAScript 5**'s native `some` if available.\n  // Aliased as `any`.\n  var any = _.some = _.any = function(obj, iterator, context) {\n    iterator || (iterator = _.identity);\n    var result = false;\n    if (obj == null) return result;\n    if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context);\n    each(obj, function(value, index, list) {\n      if (result || (result = iterator.call(context, value, index, list))) return breaker;\n    });\n    return !!result;\n  };\n\n  // Determine if the array or object contains a given value (using `===`).\n  // Aliased as `include`.\n  _.contains = _.include = function(obj, target) {\n    if (obj == null) return false;\n    if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;\n    return any(obj, function(value) {\n      return value === target;\n    });\n  };\n\n  // Invoke a method (with arguments) on every item in a collection.\n  _.invoke = function(obj, method) {\n    var args = slice.call(arguments, 2);\n    var isFunc = _.isFunction(method);\n    return _.map(obj, function(value) {\n      return (isFunc ? method : value[method]).apply(value, args);\n    });\n  };\n\n  // Convenience version of a common use case of `map`: fetching a property.\n  _.pluck = function(obj, key) {\n    return _.map(obj, function(value){ return value[key]; });\n  };\n\n  // Convenience version of a common use case of `filter`: selecting only objects\n  // containing specific `key:value` pairs.\n  _.where = function(obj, attrs, first) {\n    if (_.isEmpty(attrs)) return first ? null : [];\n    return _[first ? 'find' : 'filter'](obj, function(value) {\n      for (var key in attrs) {\n        if (attrs[key] !== value[key]) return false;\n      }\n      return true;\n    });\n  };\n\n  // Convenience version of a common use case of `find`: getting the first object\n  // containing specific `key:value` pairs.\n  _.findWhere = function(obj, attrs) {\n    return _.where(obj, attrs, true);\n  };\n\n  // Return the maximum element or (element-based computation).\n  // Can't optimize arrays of integers longer than 65,535 elements.\n  // See: https://bugs.webkit.org/show_bug.cgi?id=80797\n  _.max = function(obj, iterator, context) {\n    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {\n      return Math.max.apply(Math, obj);\n    }\n    if (!iterator && _.isEmpty(obj)) return -Infinity;\n    var result = {computed : -Infinity, value: -Infinity};\n    each(obj, function(value, index, list) {\n      var computed = iterator ? iterator.call(context, value, index, list) : value;\n      computed >= result.computed && (result = {value : value, computed : computed});\n    });\n    return result.value;\n  };\n\n  // Return the minimum element (or element-based computation).\n  _.min = function(obj, iterator, context) {\n    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {\n      return Math.min.apply(Math, obj);\n    }\n    if (!iterator && _.isEmpty(obj)) return Infinity;\n    var result = {computed : Infinity, value: Infinity};\n    each(obj, function(value, index, list) {\n      var computed = iterator ? iterator.call(context, value, index, list) : value;\n      computed < result.computed && (result = {value : value, computed : computed});\n    });\n    return result.value;\n  };\n\n  // Shuffle an array.\n  _.shuffle = function(obj) {\n    var rand;\n    var index = 0;\n    var shuffled = [];\n    each(obj, function(value) {\n      rand = _.random(index++);\n      shuffled[index - 1] = shuffled[rand];\n      shuffled[rand] = value;\n    });\n    return shuffled;\n  };\n\n  // An internal function to generate lookup iterators.\n  var lookupIterator = function(value) {\n    return _.isFunction(value) ? value : function(obj){ return obj[value]; };\n  };\n\n  // Sort the object's values by a criterion produced by an iterator.\n  _.sortBy = function(obj, value, context) {\n    var iterator = lookupIterator(value);\n    return _.pluck(_.map(obj, function(value, index, list) {\n      return {\n        value : value,\n        index : index,\n        criteria : iterator.call(context, value, index, list)\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria;\n      var b = right.criteria;\n      if (a !== b) {\n        if (a > b || a === void 0) return 1;\n        if (a < b || b === void 0) return -1;\n      }\n      return left.index < right.index ? -1 : 1;\n    }), 'value');\n  };\n\n  // An internal function used for aggregate \"group by\" operations.\n  var group = function(obj, value, context, behavior) {\n    var result = {};\n    var iterator = lookupIterator(value || _.identity);\n    each(obj, function(value, index) {\n      var key = iterator.call(context, value, index, obj);\n      behavior(result, key, value);\n    });\n    return result;\n  };\n\n  // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n  _.groupBy = function(obj, value, context) {\n    return group(obj, value, context, function(result, key, value) {\n      (_.has(result, key) ? result[key] : (result[key] = [])).push(value);\n    });\n  };\n\n  // Counts instances of an object that group by a certain criterion. Pass\n  // either a string attribute to count by, or a function that returns the\n  // criterion.\n  _.countBy = function(obj, value, context) {\n    return group(obj, value, context, function(result, key) {\n      if (!_.has(result, key)) result[key] = 0;\n      result[key]++;\n    });\n  };\n\n  // Use a comparator function to figure out the smallest index at which\n  // an object should be inserted so as to maintain order. Uses binary search.\n  _.sortedIndex = function(array, obj, iterator, context) {\n    iterator = iterator == null ? _.identity : lookupIterator(iterator);\n    var value = iterator.call(context, obj);\n    var low = 0, high = array.length;\n    while (low < high) {\n      var mid = (low + high) >>> 1;\n      iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;\n    }\n    return low;\n  };\n\n  // Safely convert anything iterable into a real, live array.\n  _.toArray = function(obj) {\n    if (!obj) return [];\n    if (_.isArray(obj)) return slice.call(obj);\n    if (obj.length === +obj.length) return _.map(obj, _.identity);\n    return _.values(obj);\n  };\n\n  // Return the number of elements in an object.\n  _.size = function(obj) {\n    if (obj == null) return 0;\n    return (obj.length === +obj.length) ? obj.length : _.keys(obj).length;\n  };\n\n  // Array Functions\n  // ---------------\n\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. Aliased as `head` and `take`. The **guard** check\n  // allows it to work with `_.map`.\n  _.first = _.head = _.take = function(array, n, guard) {\n    if (array == null) return void 0;\n    return (n != null) && !guard ? slice.call(array, 0, n) : array[0];\n  };\n\n  // Returns everything but the last entry of the array. Especially useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N. The **guard** check allows it to work with\n  // `_.map`.\n  _.initial = function(array, n, guard) {\n    return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));\n  };\n\n  // Get the last element of an array. Passing **n** will return the last N\n  // values in the array. The **guard** check allows it to work with `_.map`.\n  _.last = function(array, n, guard) {\n    if (array == null) return void 0;\n    if ((n != null) && !guard) {\n      return slice.call(array, Math.max(array.length - n, 0));\n    } else {\n      return array[array.length - 1];\n    }\n  };\n\n  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n  // Especially useful on the arguments object. Passing an **n** will return\n  // the rest N values in the array. The **guard**\n  // check allows it to work with `_.map`.\n  _.rest = _.tail = _.drop = function(array, n, guard) {\n    return slice.call(array, (n == null) || guard ? 1 : n);\n  };\n\n  // Trim out all falsy values from an array.\n  _.compact = function(array) {\n    return _.filter(array, _.identity);\n  };\n\n  // Internal implementation of a recursive `flatten` function.\n  var flatten = function(input, shallow, output) {\n    each(input, function(value) {\n      if (_.isArray(value)) {\n        shallow ? push.apply(output, value) : flatten(value, shallow, output);\n      } else {\n        output.push(value);\n      }\n    });\n    return output;\n  };\n\n  // Return a completely flattened version of an array.\n  _.flatten = function(array, shallow) {\n    return flatten(array, shallow, []);\n  };\n\n  // Return a version of the array that does not contain the specified value(s).\n  _.without = function(array) {\n    return _.difference(array, slice.call(arguments, 1));\n  };\n\n  // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // Aliased as `unique`.\n  _.uniq = _.unique = function(array, isSorted, iterator, context) {\n    if (_.isFunction(isSorted)) {\n      context = iterator;\n      iterator = isSorted;\n      isSorted = false;\n    }\n    var initial = iterator ? _.map(array, iterator, context) : array;\n    var results = [];\n    var seen = [];\n    each(initial, function(value, index) {\n      if (isSorted ? (!index || seen[seen.length - 1] !== value) : !_.contains(seen, value)) {\n        seen.push(value);\n        results.push(array[index]);\n      }\n    });\n    return results;\n  };\n\n  // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n  _.union = function() {\n    return _.uniq(concat.apply(ArrayProto, arguments));\n  };\n\n  // Produce an array that contains every item shared between all the\n  // passed-in arrays.\n  _.intersection = function(array) {\n    var rest = slice.call(arguments, 1);\n    return _.filter(_.uniq(array), function(item) {\n      return _.every(rest, function(other) {\n        return _.indexOf(other, item) >= 0;\n      });\n    });\n  };\n\n  // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n  _.difference = function(array) {\n    var rest = concat.apply(ArrayProto, slice.call(arguments, 1));\n    return _.filter(array, function(value){ return !_.contains(rest, value); });\n  };\n\n  // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n  _.zip = function() {\n    var args = slice.call(arguments);\n    var length = _.max(_.pluck(args, 'length'));\n    var results = new Array(length);\n    for (var i = 0; i < length; i++) {\n      results[i] = _.pluck(args, \"\" + i);\n    }\n    return results;\n  };\n\n  // Converts lists into objects. Pass either a single array of `[key, value]`\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of\n  // the corresponding values.\n  _.object = function(list, values) {\n    if (list == null) return {};\n    var result = {};\n    for (var i = 0, l = list.length; i < l; i++) {\n      if (values) {\n        result[list[i]] = values[i];\n      } else {\n        result[list[i][0]] = list[i][1];\n      }\n    }\n    return result;\n  };\n\n  // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),\n  // we need this function. Return the position of the first occurrence of an\n  // item in an array, or -1 if the item is not included in the array.\n  // Delegates to **ECMAScript 5**'s native `indexOf` if available.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n  _.indexOf = function(array, item, isSorted) {\n    if (array == null) return -1;\n    var i = 0, l = array.length;\n    if (isSorted) {\n      if (typeof isSorted == 'number') {\n        i = (isSorted < 0 ? Math.max(0, l + isSorted) : isSorted);\n      } else {\n        i = _.sortedIndex(array, item);\n        return array[i] === item ? i : -1;\n      }\n    }\n    if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);\n    for (; i < l; i++) if (array[i] === item) return i;\n    return -1;\n  };\n\n  // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.\n  _.lastIndexOf = function(array, item, from) {\n    if (array == null) return -1;\n    var hasIndex = from != null;\n    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {\n      return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);\n    }\n    var i = (hasIndex ? from : array.length);\n    while (i--) if (array[i] === item) return i;\n    return -1;\n  };\n\n  // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n  _.range = function(start, stop, step) {\n    if (arguments.length <= 1) {\n      stop = start || 0;\n      start = 0;\n    }\n    step = arguments[2] || 1;\n\n    var len = Math.max(Math.ceil((stop - start) / step), 0);\n    var idx = 0;\n    var range = new Array(len);\n\n    while(idx < len) {\n      range[idx++] = start;\n      start += step;\n    }\n\n    return range;\n  };\n\n  // Function (ahem) Functions\n  // ------------------\n\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n  // available.\n  _.bind = function(func, context) {\n    if (func.bind === nativeBind && nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));\n    var args = slice.call(arguments, 2);\n    return function() {\n      return func.apply(context, args.concat(slice.call(arguments)));\n    };\n  };\n\n  // Partially apply a function by creating a version that has had some of its\n  // arguments pre-filled, without changing its dynamic `this` context.\n  _.partial = function(func) {\n    var args = slice.call(arguments, 1);\n    return function() {\n      return func.apply(this, args.concat(slice.call(arguments)));\n    };\n  };\n\n  // Bind all of an object's methods to that object. Useful for ensuring that\n  // all callbacks defined on an object belong to it.\n  _.bindAll = function(obj) {\n    var funcs = slice.call(arguments, 1);\n    if (funcs.length === 0) funcs = _.functions(obj);\n    each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });\n    return obj;\n  };\n\n  // Memoize an expensive function by storing its results.\n  _.memoize = function(func, hasher) {\n    var memo = {};\n    hasher || (hasher = _.identity);\n    return function() {\n      var key = hasher.apply(this, arguments);\n      return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));\n    };\n  };\n\n  // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n  _.delay = function(func, wait) {\n    var args = slice.call(arguments, 2);\n    return setTimeout(function(){ return func.apply(null, args); }, wait);\n  };\n\n  // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n  _.defer = function(func) {\n    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));\n  };\n\n  // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time.\n  _.throttle = function(func, wait) {\n    var context, args, timeout, result;\n    var previous = 0;\n    var later = function() {\n      previous = new Date;\n      timeout = null;\n      result = func.apply(context, args);\n    };\n    return function() {\n      var now = new Date;\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0) {\n        clearTimeout(timeout);\n        timeout = null;\n        previous = now;\n        result = func.apply(context, args);\n      } else if (!timeout) {\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n  };\n\n  // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds. If `immediate` is passed, trigger the function on the\n  // leading edge, instead of the trailing.\n  _.debounce = function(func, wait, immediate) {\n    var timeout, result;\n    return function() {\n      var context = this, args = arguments;\n      var later = function() {\n        timeout = null;\n        if (!immediate) result = func.apply(context, args);\n      };\n      var callNow = immediate && !timeout;\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n      if (callNow) result = func.apply(context, args);\n      return result;\n    };\n  };\n\n  // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n  _.once = function(func) {\n    var ran = false, memo;\n    return function() {\n      if (ran) return memo;\n      ran = true;\n      memo = func.apply(this, arguments);\n      func = null;\n      return memo;\n    };\n  };\n\n  // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n  _.wrap = function(func, wrapper) {\n    return function() {\n      var args = [func];\n      push.apply(args, arguments);\n      return wrapper.apply(this, args);\n    };\n  };\n\n  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  _.compose = function() {\n    var funcs = arguments;\n    return function() {\n      var args = arguments;\n      for (var i = funcs.length - 1; i >= 0; i--) {\n        args = [funcs[i].apply(this, args)];\n      }\n      return args[0];\n    };\n  };\n\n  // Returns a function that will only be executed after being called N times.\n  _.after = function(times, func) {\n    if (times <= 0) return func();\n    return function() {\n      if (--times < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  };\n\n  // Object Functions\n  // ----------------\n\n  // Retrieve the names of an object's properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`\n  _.keys = nativeKeys || function(obj) {\n    if (obj !== Object(obj)) throw new TypeError('Invalid object');\n    var keys = [];\n    for (var key in obj) if (_.has(obj, key)) keys[keys.length] = key;\n    return keys;\n  };\n\n  // Retrieve the values of an object's properties.\n  _.values = function(obj) {\n    var values = [];\n    for (var key in obj) if (_.has(obj, key)) values.push(obj[key]);\n    return values;\n  };\n\n  // Convert an object into a list of `[key, value]` pairs.\n  _.pairs = function(obj) {\n    var pairs = [];\n    for (var key in obj) if (_.has(obj, key)) pairs.push([key, obj[key]]);\n    return pairs;\n  };\n\n  // Invert the keys and values of an object. The values must be serializable.\n  _.invert = function(obj) {\n    var result = {};\n    for (var key in obj) if (_.has(obj, key)) result[obj[key]] = key;\n    return result;\n  };\n\n  // Return a sorted list of the function names available on the object.\n  // Aliased as `methods`\n  _.functions = _.methods = function(obj) {\n    var names = [];\n    for (var key in obj) {\n      if (_.isFunction(obj[key])) names.push(key);\n    }\n    return names.sort();\n  };\n\n  // Extend a given object with all the properties in passed-in object(s).\n  _.extend = function(obj) {\n    each(slice.call(arguments, 1), function(source) {\n      if (source) {\n        for (var prop in source) {\n          obj[prop] = source[prop];\n        }\n      }\n    });\n    return obj;\n  };\n\n  // Return a copy of the object only containing the whitelisted properties.\n  _.pick = function(obj) {\n    var copy = {};\n    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));\n    each(keys, function(key) {\n      if (key in obj) copy[key] = obj[key];\n    });\n    return copy;\n  };\n\n   // Return a copy of the object without the blacklisted properties.\n  _.omit = function(obj) {\n    var copy = {};\n    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));\n    for (var key in obj) {\n      if (!_.contains(keys, key)) copy[key] = obj[key];\n    }\n    return copy;\n  };\n\n  // Fill in a given object with default properties.\n  _.defaults = function(obj) {\n    each(slice.call(arguments, 1), function(source) {\n      if (source) {\n        for (var prop in source) {\n          if (obj[prop] == null) obj[prop] = source[prop];\n        }\n      }\n    });\n    return obj;\n  };\n\n  // Create a (shallow-cloned) duplicate of an object.\n  _.clone = function(obj) {\n    if (!_.isObject(obj)) return obj;\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  };\n\n  // Invokes interceptor with the obj, and then returns obj.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n  _.tap = function(obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  };\n\n  // Internal recursive comparison function for `isEqual`.\n  var eq = function(a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the Harmony `egal` proposal: http://wiki.ecmascript.org/doku.php?id=harmony:egal.\n    if (a === b) return a !== 0 || 1 / a == 1 / b;\n    // A strict comparison is necessary because `null == undefined`.\n    if (a == null || b == null) return a === b;\n    // Unwrap any wrapped objects.\n    if (a instanceof _) a = a._wrapped;\n    if (b instanceof _) b = b._wrapped;\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n    if (className != toString.call(b)) return false;\n    switch (className) {\n      // Strings, numbers, dates, and booleans are compared by value.\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return a == String(b);\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for\n        // other numeric values.\n        return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a == +b;\n      // RegExps are compared by their source patterns and flags.\n      case '[object RegExp]':\n        return a.source == b.source &&\n               a.global == b.global &&\n               a.multiline == b.multiline &&\n               a.ignoreCase == b.ignoreCase;\n    }\n    if (typeof a != 'object' || typeof b != 'object') return false;\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] == a) return bStack[length] == b;\n    }\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n    var size = 0, result = true;\n    // Recursively compare objects and arrays.\n    if (className == '[object Array]') {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      size = a.length;\n      result = size == b.length;\n      if (result) {\n        // Deep compare the contents, ignoring non-numeric properties.\n        while (size--) {\n          if (!(result = eq(a[size], b[size], aStack, bStack))) break;\n        }\n      }\n    } else {\n      // Objects with different constructors are not equivalent, but `Object`s\n      // from different frames are.\n      var aCtor = a.constructor, bCtor = b.constructor;\n      if (aCtor !== bCtor && !(_.isFunction(aCtor) && (aCtor instanceof aCtor) &&\n                               _.isFunction(bCtor) && (bCtor instanceof bCtor))) {\n        return false;\n      }\n      // Deep compare objects.\n      for (var key in a) {\n        if (_.has(a, key)) {\n          // Count the expected number of properties.\n          size++;\n          // Deep compare each member.\n          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;\n        }\n      }\n      // Ensure that both objects contain the same number of properties.\n      if (result) {\n        for (key in b) {\n          if (_.has(b, key) && !(size--)) break;\n        }\n        result = !size;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return result;\n  };\n\n  // Perform a deep comparison to check if two objects are equal.\n  _.isEqual = function(a, b) {\n    return eq(a, b, [], []);\n  };\n\n  // Is a given array, string, or object empty?\n  // An \"empty\" object has no enumerable own-properties.\n  _.isEmpty = function(obj) {\n    if (obj == null) return true;\n    if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;\n    for (var key in obj) if (_.has(obj, key)) return false;\n    return true;\n  };\n\n  // Is a given value a DOM element?\n  _.isElement = function(obj) {\n    return !!(obj && obj.nodeType === 1);\n  };\n\n  // Is a given value an array?\n  // Delegates to ECMA5's native Array.isArray\n  _.isArray = nativeIsArray || function(obj) {\n    return toString.call(obj) == '[object Array]';\n  };\n\n  // Is a given variable an object?\n  _.isObject = function(obj) {\n    return obj === Object(obj);\n  };\n\n  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.\n  each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {\n    _['is' + name] = function(obj) {\n      return toString.call(obj) == '[object ' + name + ']';\n    };\n  });\n\n  // Define a fallback version of the method in browsers (ahem, IE), where\n  // there isn't any inspectable \"Arguments\" type.\n  if (!_.isArguments(arguments)) {\n    _.isArguments = function(obj) {\n      return !!(obj && _.has(obj, 'callee'));\n    };\n  }\n\n  // Optimize `isFunction` if appropriate.\n  if (true) {\n    _.isFunction = function(obj) {\n      return typeof obj === 'function';\n    };\n  }\n\n  // Is a given object a finite number?\n  _.isFinite = function(obj) {\n    return isFinite(obj) && !isNaN(parseFloat(obj));\n  };\n\n  // Is the given value `NaN`? (NaN is the only number which does not equal itself).\n  _.isNaN = function(obj) {\n    return _.isNumber(obj) && obj != +obj;\n  };\n\n  // Is a given value a boolean?\n  _.isBoolean = function(obj) {\n    return obj === true || obj === false || toString.call(obj) == '[object Boolean]';\n  };\n\n  // Is a given value equal to null?\n  _.isNull = function(obj) {\n    return obj === null;\n  };\n\n  // Is a given variable undefined?\n  _.isUndefined = function(obj) {\n    return obj === void 0;\n  };\n\n  // Shortcut function for checking if an object has a given property directly\n  // on itself (in other words, not on a prototype).\n  _.has = function(obj, key) {\n    return hasOwnProperty.call(obj, key);\n  };\n\n  // Utility Functions\n  // -----------------\n\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n  // previous owner. Returns a reference to the Underscore object.\n  _.noConflict = function() {\n    root._ = previousUnderscore;\n    return this;\n  };\n\n  // Keep the identity function around for default iterators.\n  _.identity = function(value) {\n    return value;\n  };\n\n  // Run a function **n** times.\n  _.times = function(n, iterator, context) {\n    var accum = Array(n);\n    for (var i = 0; i < n; i++) accum[i] = iterator.call(context, i);\n    return accum;\n  };\n\n  // Return a random integer between min and max (inclusive).\n  _.random = function(min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n    return min + Math.floor(Math.random() * (max - min + 1));\n  };\n\n  // List of HTML entities for escaping.\n  var entityMap = {\n    escape: {\n      '&': '&amp;',\n      '<': '&lt;',\n      '>': '&gt;',\n      '\"': '&quot;',\n      \"'\": '&#x27;',\n      '/': '&#x2F;'\n    }\n  };\n  entityMap.unescape = _.invert(entityMap.escape);\n\n  // Regexes containing the keys and values listed immediately above.\n  var entityRegexes = {\n    escape:   new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),\n    unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')\n  };\n\n  // Functions for escaping and unescaping strings to/from HTML interpolation.\n  _.each(['escape', 'unescape'], function(method) {\n    _[method] = function(string) {\n      if (string == null) return '';\n      return ('' + string).replace(entityRegexes[method], function(match) {\n        return entityMap[method][match];\n      });\n    };\n  });\n\n  // If the value of the named property is a function then invoke it;\n  // otherwise, return it.\n  _.result = function(object, property) {\n    if (object == null) return null;\n    var value = object[property];\n    return _.isFunction(value) ? value.call(object) : value;\n  };\n\n  // Add your own custom functions to the Underscore object.\n  _.mixin = function(obj) {\n    each(_.functions(obj), function(name){\n      var func = _[name] = obj[name];\n      _.prototype[name] = function() {\n        var args = [this._wrapped];\n        push.apply(args, arguments);\n        return result.call(this, func.apply(_, args));\n      };\n    });\n  };\n\n  // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n  var idCounter = 0;\n  _.uniqueId = function(prefix) {\n    var id = ++idCounter + '';\n    return prefix ? prefix + id : id;\n  };\n\n  // By default, Underscore uses ERB-style template delimiters, change the\n  // following template settings to use alternative delimiters.\n  _.templateSettings = {\n    evaluate    : /<%([\\s\\S]+?)%>/g,\n    interpolate : /<%=([\\s\\S]+?)%>/g,\n    escape      : /<%-([\\s\\S]+?)%>/g\n  };\n\n  // When customizing `templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n  var noMatch = /(.)^/;\n\n  // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n  var escapes = {\n    \"'\":      \"'\",\n    '\\\\':     '\\\\',\n    '\\r':     'r',\n    '\\n':     'n',\n    '\\t':     't',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  var escaper = /\\\\|'|\\r|\\n|\\t|\\u2028|\\u2029/g;\n\n  // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  _.template = function(text, data, settings) {\n    var render;\n    settings = _.defaults({}, settings, _.templateSettings);\n\n    // Combine delimiters into one regular expression via alternation.\n    var matcher = new RegExp([\n      (settings.escape || noMatch).source,\n      (settings.interpolate || noMatch).source,\n      (settings.evaluate || noMatch).source\n    ].join('|') + '|$', 'g');\n\n    // Compile the template source, escaping string literals appropriately.\n    var index = 0;\n    var source = \"__p+='\";\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n      source += text.slice(index, offset)\n        .replace(escaper, function(match) { return '\\\\' + escapes[match]; });\n\n      if (escape) {\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n      }\n      if (interpolate) {\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n      }\n      if (evaluate) {\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\n      }\n      index = offset + match.length;\n      return match;\n    });\n    source += \"';\\n\";\n\n    // If a variable is not specified, place data values in local scope.\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n\n    source = \"var __t,__p='',__j=Array.prototype.join,\" +\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n      source + \"return __p;\\n\";\n\n    try {\n      render = new Function(settings.variable || 'obj', '_', source);\n    } catch (e) {\n      e.source = source;\n      throw e;\n    }\n\n    if (data) return render(data, _);\n    var template = function(data) {\n      return render.call(this, data, _);\n    };\n\n    // Provide the compiled function source as a convenience for precompilation.\n    template.source = 'function(' + (settings.variable || 'obj') + '){\\n' + source + '}';\n\n    return template;\n  };\n\n  // Add a \"chain\" function, which will delegate to the wrapper.\n  _.chain = function(obj) {\n    return _(obj).chain();\n  };\n\n  // OOP\n  // ---------------\n  // If Underscore is called as a function, it returns a wrapped object that\n  // can be used OO-style. This wrapper holds altered versions of all the\n  // underscore functions. Wrapped objects may be chained.\n\n  // Helper function to continue chaining intermediate results.\n  var result = function(obj) {\n    return this._chain ? _(obj).chain() : obj;\n  };\n\n  // Add all of the Underscore functions to the wrapper object.\n  _.mixin(_);\n\n  // Add all mutator Array functions to the wrapper.\n  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      var obj = this._wrapped;\n      method.apply(obj, arguments);\n      if ((name == 'shift' || name == 'splice') && obj.length === 0) delete obj[0];\n      return result.call(this, obj);\n    };\n  });\n\n  // Add all accessor Array functions to the wrapper.\n  each(['concat', 'join', 'slice'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      return result.call(this, method.apply(this._wrapped, arguments));\n    };\n  });\n\n  _.extend(_.prototype, {\n\n    // Start chaining a wrapped Underscore object.\n    chain: function() {\n      this._chain = true;\n      return this;\n    },\n\n    // Extracts the result from a wrapped and chained object.\n    value: function() {\n      return this._wrapped;\n    }\n\n  });\n\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///10\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./src/styles/index.css\nvar styles = __webpack_require__(2);\n\n// CONCATENATED MODULE: ./src/input.js\n\n\nconst Input = (function() {\n  let keysDown = [];\n  let keysPressed = [];\n  let mouseAt = undefined;\n  let mouseMoved = undefined;\n  let mouseUped = undefined;\n\n  function keyDown(keyCode) {\n    if (keysPressed.indexOf(keyCode) < 0) {\n      keysPressed.push(keyCode);\n    }\n    if (keysDown.indexOf(keyCode) < 0) {\n      keysDown.push(keyCode);\n    }\n  }\n\n  function keyUp(keyCode) {\n    keysDown = keysDown.filter(element => {\n      return element != keyCode;\n    });\n  }\n\n  function getKeys() {\n    return keysDown.concat(\n      keysPressed.filter(key => {\n        return keysDown.indexOf(key) < 0;\n      })\n    );\n  }\n\n  function mouseMove(event) {\n    mouseAt = event;\n    mouseMoved = event;\n  }\n\n  function mouseUp(event) {\n    mouseUped = event;\n  }\n\n  function getMouse() {\n    return { mouseAt: mouseAt, mouseMove: mouseMoved, mouseUp: mouseUped };\n  }\n\n  // Usually called after the inputs are polled; does not reset mouseAt\n  function resetInputs() {\n    keysPressed = [];\n    mouseMoved = undefined;\n    mouseUped = undefined;\n  }\n\n  return {\n    keyDown: keyDown,\n    keyUp: keyUp,\n    getKeys: getKeys,\n    mouseMove: mouseMove,\n    mouseUp: mouseUp,\n    getMouse: getMouse,\n    resetInputs: resetInputs\n  };\n})();\n\n// CONCATENATED MODULE: ./src/tile_highlight.js\n\n\n\n\nconst TileHighlightDefs = [\n  {\n    imagePath: "./src/img/tile_highlights/black_outline_blur.png",\n    frameSize: { width: 512, height: 256 },\n    frameOffsets: { x: 0, y: 0 }\n  },\n  {\n    imagePath: "./src/img/tile_highlights/black_outline.png",\n    frameSize: { width: 512, height: 256 },\n    frameOffsets: { x: 0, y: 0 }\n  },\n  {\n    imagePath: "./src/img/tile_highlights/red_outline.png",\n    frameSize: { width: 512, height: 256 },\n    frameOffsets: { x: 0, y: 0 }\n  },\n  {\n    imagePath: "./src/img/tile_highlights/red_transparent_full_tile.png",\n    frameSize: { width: 512, height: 256 },\n    frameOffsets: { x: 0, y: 0 }\n  },\n  {\n    imagePath: "./src/img/tile_highlights/yellow_transparent_full_tile.png",\n    frameSize: { width: 512, height: 256 },\n    frameOffsets: { x: 0, y: 0 }\n  }\n];\n\nclass tile_highlight_TileHighlight {\n  constructor(highlightDef, location) {\n    this.asset = new Asset(\n      highlightDef.imagePath,\n      highlightDef.frameSize,\n      highlightDef.frameOffsets\n    );\n    this.location = location;\n  }\n\n  drawOnto(target, offsets) {\n    target.drawImage(\n      this.asset.image,\n      0,\n      0,\n      this.asset.frameSize.width,\n      this.asset.frameSize.height,\n      this.location.x - offsets.x,\n      this.location.y - offsets.y,\n      128,\n      64\n    );\n  }\n}\n\nclass CursorHighlight extends tile_highlight_TileHighlight {\n  constructor(location) {\n    super(TileHighlightDefs[4], location);\n  }\n}\n\nclass SelectedMobileTileHighlight extends tile_highlight_TileHighlight {\n  constructor(location) {\n    super(TileHighlightDefs[3], location);\n  }\n}\n\n// CONCATENATED MODULE: ./src/assets.js\n\n\n\n\nconst ImageManager = (function() {\n  let images = {};\n\n  function loadImages(assetOwners, callback) {\n    let imagePaths = assetOwners.map(assetOwner => {\n      return assetOwner.asset.imagePath;\n    });\n    let tileHighlightAssetPaths = TileHighlightDefs.map(def => {\n      return def.imagePath;\n    });\n    imagePaths = [...new Set(imagePaths)];\n    imagePaths = imagePaths.concat(tileHighlightAssetPaths);\n    let imagesRemaining = imagePaths.length;\n    for (let imagePath of imagePaths) {\n      let image = new Image();\n      images[imagePath] = image;\n      image.onload = function() {\n        imagesRemaining--;\n        if (imagesRemaining <= 0) {\n          callback();\n        }\n      };\n      image.src = imagePath;\n    }\n  }\n\n  function get(imagePath) {\n    return images[imagePath];\n  }\n\n  return {\n    loadImages: loadImages,\n    get: get\n  };\n})();\n\nclass Asset {\n  constructor(imagePath, frameSize, frameOffsets) {\n    this.imagePath = imagePath;\n    this.frameSize = frameSize;\n    this.frameOffsets = frameOffsets || { x: 0, y: 0 };\n  }\n\n  get image() {\n    return ImageManager.get(this.imagePath);\n  }\n}\n\n// CONCATENATED MODULE: ./src/tile.js\n\n\n\n\nclass tile_Tile {\n  constructor(imagePath, frameSize) {\n    this.asset = new Asset(imagePath, frameSize);\n  }\n\n  get image() {\n    return this.asset.image;\n  }\n}\n\n// CONCATENATED MODULE: ./src/util.js\n\n\nconst rand = max => {\n  return Math.floor(Math.random() * Math.floor(max));\n};\n\nconst lesserOf = (a, b) => {\n  if (a <= b) {\n    return a;\n  } else {\n    return b;\n  }\n};\n\nconst throttle = (callback, delay) => {\n  let wait = false;\n  return function(arg) {\n    if (!wait) {\n      callback(arg);\n      wait = true;\n      setTimeout(function() {\n        wait = false;\n      }, delay);\n    }\n  };\n};\n\nconst coordsEqual = (a, b) => {\n  if (a.x == undefined || b.x == undefined) {\n    console.log("Undefined value in util.coordsEqual");\n    console.log(`a.x: ${a.x} a.y: ${a.y} b.x: ${b.x} b.y: ${b.y}`);\n  }\n  return a.x == b.x && a.y == b.y;\n};\n\nconst arrayIncludesCoords = (arr, coord_a) => {\n  return (\n    arr.filter(coord_b => {\n      return coordsEqual(coord_a, coord_b);\n    }).length > 0\n  );\n};\n\nconst entityMapLocationFromCell = (cell, map, frameOffsets) => {\n  if (cell == undefined) {\n    return undefined;\n  }\n  let mapDestination = mapCoordsForCell({ x: cell.x, y: cell.y }, map);\n  let tileOffsets = map.tileOffsets;\n  let mapLocation = {\n    x: mapDestination.x + tileOffsets.x - frameOffsets.x,\n    y: mapDestination.y + tileOffsets.y - frameOffsets.y\n  };\n  return mapLocation;\n};\n\nconst mapCoordsForCell = (cellCoords, map) => {\n  let xOffset = (map.mapSize * map.tileSize.width) / 2 - map.tileSize.width / 2;\n  let mapX = (cellCoords.x - cellCoords.y) * (map.tileSize.width / 2) + xOffset;\n  let mapY = (cellCoords.x + cellCoords.y) * (map.tileSize.height / 2);\n  return { x: mapX, y: mapY };\n};\n\nconst Facing = {\n  SOUTHEAST: 7,\n  SOUTHWEST: 1,\n  NORTHWEST: 3,\n  NORTHEAST: 5\n};\n\nconst sleep = ms => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\n\n// Uses Brensenham\'s line algorithm\nconst buildPathBrensenham = (start, end, useDiagonal) => {\n  let path = [];\n\n  let currentX = start.x,\n    currentY = start.y;\n  let deltaX = Math.abs(end.x - start.x),\n    deltaY = Math.abs(end.y - start.y);\n  let slopeX = start.x < end.x ? 1 : -1,\n    slopeY = start.y < end.y ? 1 : -1;\n  let err = deltaX - deltaY;\n\n  while (currentX != end.x || currentY != end.y) {\n    if (useDiagonal) {\n      if (2 * err > deltaY * -1) {\n        err -= deltaY;\n        currentX += slopeX;\n      }\n      if (2 * err < deltaX) {\n        err += deltaX;\n        currentY += slopeY;\n      }\n    } else {\n      if (2 * err > deltaY * -1) {\n        err -= deltaY;\n        currentX += slopeX;\n      } else if (2 * err < deltaX) {\n        err += deltaX;\n        currentY += slopeY;\n      }\n    }\n\n    path.push({ x: currentX, y: currentY });\n  }\n  return path;\n};\n\nconst coordsInBounds = (coords, boundingSize) => {\n  return (\n    coords.x >= 0 &&\n    coords.y >= 0 &&\n    coords.x < boundingSize &&\n    coords.y < boundingSize\n  );\n};\n\n// CONCATENATED MODULE: ./src/cell.js\n\n\nclass Cell {\n  constructor(tile, map, coords) {\n    this.tile = tile;\n    this.map = map;\n    this.coords = coords;\n    this.contents = [];\n  }\n\n  get neighbors() {\n    return this.map.neighbors(this.coords);\n  }\n\n  get x() {\n    return this.coords.x;\n  }\n\n  get y() {\n    return this.coords.y;\n  }\n\n  addContents(entity) {\n    this.contents.push(entity);\n  }\n\n  removeContents(entity) {\n    this.contents = this.contents.filter(el => !(el == entity));\n  }\n\n  pathable() {\n    return this.contents.length == 0;\n  }\n}\n\n// CONCATENATED MODULE: ./src/map.js\n\n\n\n\n\nclass Map {\n  constructor(tiles, mapSize) {\n    this.tiles = tiles;\n    this.mapSize = mapSize;\n    this.tileSize = { width: 128, height: 64 };\n    this.cells = buildCells(this);\n  }\n\n  get mapCanvas() {\n    if (this.myMapCanvas == undefined) {\n      this.myMapCanvas = drawMapCanvas(this);\n    }\n    return this.myMapCanvas;\n  }\n\n  get tileOffsets() {\n    return { x: this.tileSize.width / 2, y: this.tileSize.height / 2 };\n  }\n\n  cellAt(coords) {\n    let row = this.cells[coords.x];\n    if (row != undefined) {\n      return row[coords.y];\n    }\n    return undefined;\n  }\n\n  neighbors(coords) {\n    let neighbors = [];\n    if (coords.x < this.mapSize - 1) {\n      neighbors.push(this.cells[coords.x + 1][coords.y]);\n    }\n    if (coords.x > 0) {\n      neighbors.push(this.cells[coords.x - 1][coords.y]);\n    }\n    if (coords.y < this.mapSize - 1) {\n      neighbors.push(this.cells[coords.x][coords.y + 1]);\n    }\n    if (coords.y > 0) {\n      neighbors.push(this.cells[coords.x][coords.y - 1]);\n    }\n    return neighbors;\n  }\n}\n\nfunction buildCells(map) {\n  let cells = [];\n  for (let i = 0; i < map.mapSize; i++) {\n    cells[i] = [];\n    for (let j = 0; j < map.mapSize; j++) {\n      // @ts-ignore\n      cells[i][j] = new Cell(map.tiles[rand(map.tiles.length)], map, {\n        x: i,\n        y: j\n      });\n    }\n  }\n  return cells;\n}\n\nfunction drawMapCanvas(map) {\n  let mapCanvas = document.createElement("canvas");\n  mapCanvas.width = map.mapSize * map.tileSize.width;\n  mapCanvas.height = map.mapSize * map.tileSize.height;\n  let context = mapCanvas.getContext("2d");\n  context.rect(0, 0, mapCanvas.width, mapCanvas.height);\n  context.fillStyle = "lightgrey";\n  context.fill();\n  for (let [x, row] of map.cells.entries()) {\n    for (let [y, cell] of row.entries()) {\n      drawTile(map, context, cell.tile, x, y);\n    }\n  }\n  return mapCanvas;\n}\n\nfunction drawTile(map, context, tile, mapX, mapY) {\n  let contextCoords = mapCoordsForCell({ x: mapX, y: mapY }, map);\n  context.drawImage(\n    tile.image,\n    contextCoords.x,\n    contextCoords.y,\n    map.tileSize.width,\n    map.tileSize.height\n  );\n}\n\n// CONCATENATED MODULE: ./src/entity.js\n\n\n\n\n\nclass entity_Entity {\n  constructor(entityDef, scene, brain) {\n    this.asset = new Asset(\n      entityDef.imagePath,\n      entityDef.frameSize,\n      entityDef.frameOffsets\n    );\n    this.scene = scene;\n    if (entityDef.startCell) {\n      this.cellLocation = this.scene.map.cellAt(entityDef.startCell);\n    } else {\n      this.cellLocation = undefined;\n    }\n    if (this.cellLocation) {\n      this.addToCell(this.cellLocation);\n    }\n    this.myLocation = entityMapLocationFromCell(\n      this.cellLocation,\n      this.scene.map,\n      this.asset.frameOffsets\n    );\n    this.cellPath = [];\n    this.brain = brain;\n    this.destination = undefined;\n    this.facing = entityDef.facing;\n  }\n\n  get location() {\n    return this.myLocation;\n  }\n\n  set location(newLocation) {\n    let newFacing = undefined;\n    if (newLocation != undefined && this.myLocation != undefined) {\n      if (\n        newLocation.x >= this.myLocation.x &&\n        newLocation.y >= this.myLocation.y\n      ) {\n        newFacing = Facing.SOUTHEAST;\n      } else if (\n        newLocation.x >= this.myLocation.x &&\n        newLocation.y <= this.myLocation.y\n      ) {\n        newFacing = Facing.NORTHEAST;\n      } else if (\n        newLocation.x <= this.myLocation.x &&\n        newLocation.y <= this.myLocation.y\n      ) {\n        newFacing = Facing.NORTHWEST;\n      } else if (\n        newLocation.x <= this.myLocation.x &&\n        newLocation.y >= this.myLocation.y\n      ) {\n        newFacing = Facing.SOUTHWEST;\n      } else {\n        newFacing = Facing.NORTHEAST;\n      }\n    }\n    this.facing = newFacing;\n    this.myLocation = newLocation;\n  }\n\n  get frameXOrigin() {\n    if (this.facing != undefined) {\n      return this.facing * this.asset.frameSize.width;\n    }\n    return 0;\n  }\n\n  get frameYOrigin() {\n    return 0;\n  }\n\n  respondToMoveCommand(eventCell, startCallback, endCallback) {\n    if (\n      this.activity == undefined &&\n      this.brain != undefined &&\n      eventCell.pathable()\n    ) {\n      this.activity = this.brain.getActivity(\n        this,\n        eventCell,\n        startCallback,\n        endCallback\n      );\n    }\n  }\n\n  activityDone() {\n    this.activity = undefined;\n  }\n\n  moveBetweenCells(from, to) {\n    this.removeFromCell(from);\n    this.addToCell(to);\n  }\n\n  addToCell(cell) {\n    cell.addContents(this);\n    this.cellLocation = cell;\n    this.scene.addEntityToDraw(this);\n  }\n\n  removeFromCell(cell) {\n    cell.removeContents(this);\n    this.scene.removeEntityFromDraw(this);\n    if (coordsEqual(this.cellLocation, cell)) {\n      this.cellLocation = undefined;\n    }\n  }\n\n  tick(tickCount) {\n    let i = 0;\n    do {\n      if (this.activity != undefined) {\n        this.activity();\n      }\n    } while (i++ < tickCount);\n  }\n\n  drawOnto(target, offsets) {\n    target.drawImage(\n      this.asset.image,\n      this.frameXOrigin,\n      this.frameYOrigin,\n      this.asset.frameSize.width,\n      this.asset.frameSize.height,\n      this.location.x - offsets.x,\n      this.location.y - offsets.y,\n      this.asset.frameSize.width,\n      this.asset.frameSize.height\n    );\n  }\n\n  isSelectedMobile() {\n    return this.scene.activeMobile === this;\n  }\n}\n\n// CONCATENATED MODULE: ./src/binary_heap.js\n// Code for binary heap adapted from\n// http://eloquentjavascript.net/1st_edition/appendix2.html\n// by Marijn Haverbeke\n\n\n\nclass BinaryHeap {\n  constructor(scoreFunction, equalityFunction) {\n    this.scoreFunction = scoreFunction;\n    this.equalityFunction = equalityFunction;\n    this.elements = [];\n  }\n\n  first() {\n    return this.elements[0];\n  }\n\n  push(newElement) {\n    // Add the new element to the end of the array.\n    this.elements.push(newElement);\n    // Allow it to bubble up.\n    this.bubbleUp(this.elements.length - 1);\n  }\n\n  pop() {\n    // Store the first element so we can return it later.\n    let first = this.elements[0];\n    // Get the element at the end of the array.\n    let last = this.elements.pop();\n    // If there are any elements left, put the end element at the\n    // start, and let it sink down.\n    if (this.elements.length > 0) {\n      this.elements[0] = last;\n      this.sinkDown(0);\n    }\n    return first;\n  }\n\n  remove(targetElement) {\n    for (let [i, element] of this.elements.entries()) {\n      if (this.equalityFunction(targetElement, element)) {\n        let lastElement = this.elements.pop();\n        if (!(i == length - 1)) {\n          this.elements[i] = lastElement;\n          this.bubbleUp(i);\n          this.sinkDown(i);\n        }\n      }\n    }\n  }\n\n  size() {\n    return this.elements.length;\n  }\n\n  includes(targetElement) {\n    return this.elements.indexOf(targetElement) != -1;\n  }\n\n  bubbleUp(i) {\n    // Fetch the element that has to be moved.\n    let element = this.elements[i],\n      score = this.scoreFunction(element);\n    // When at 0, an element cannot go up any further.\n    while (i > 0) {\n      // Compute the parent element\'s index, and fetch it.\n      let parentI = Math.floor((i + 1) / 2) - 1,\n        parent = this.elements[parentI];\n      // If the parent has a lesser score, things are in order and we\n      // are done.\n      if (score >= this.scoreFunction(parent)) break;\n      // Otherwise, swap the parent with the current element and\n      // continue.\n      this.elements[parentI] = element;\n      this.elements[i] = parent;\n      i = parentI;\n    }\n  }\n\n  sinkDown(i) {\n    // Look up the target element and its score.\n    var length = this.elements.length,\n      element = this.elements[i],\n      score = this.scoreFunction(element);\n\n    while (true) {\n      // Compute the indices of the child elements.\n      var child2i = (i + 1) * 2,\n        child1i = child2i - 1;\n      // This is used to store the new position of the element,\n      // if any.\n      var swap = null;\n      // If the first child exists (is inside the array)...\n      if (child1i < length) {\n        // Look it up and compute its score.\n        var child1 = this.elements[child1i],\n          child1Score = this.scoreFunction(child1);\n        // If the score is less than our element\'s, we need to swap.\n        if (child1Score < score) swap = child1i;\n      }\n      // Do the same checks for the other child.\n      if (child2i < length) {\n        var child2 = this.elements[child2i],\n          child2Score = this.scoreFunction(child2);\n        if (child2Score < (swap == null ? score : child1Score)) swap = child2i;\n      }\n\n      // No need to swap further, we are done.\n      if (swap == null) break;\n\n      // Otherwise, swap and continue.\n      this.elements[i] = this.elements[swap];\n      this.elements[swap] = element;\n      i = swap;\n    }\n  }\n}\n\n// CONCATENATED MODULE: ./src/brain.js\n\n\n\n\n\nclass brain_MobileBrain {\n  getActivity(entity, eventCell, startCallback, endCallback) {\n    let start = entity.cellLocation;\n    let end = eventCell;\n    let path = buildPathAStar(start, end);\n    let destination = undefined;\n    startCallback();\n    return () => {\n      if (destination != undefined) {\n        let nextPosition = getNextMapPosition(entity, destination);\n        entity.location = nextPosition;\n        if (coordsEqual(entity.location, destination)) {\n          destination = undefined;\n        }\n      } else if (path.length > 0) {\n        entity.moveBetweenCells(entity.cellLocation, path[0]);\n        destination = getDestination(entity, path);\n      } else {\n        entity.activityDone();\n        endCallback();\n      }\n    };\n  }\n}\n\nfunction getNextMapPosition(entity, destination) {\n  let currentLoc = { x: entity.location.x, y: entity.location.y };\n  let dx = currentLoc.x - destination.x,\n    dy = currentLoc.y - destination.y;\n  let dist = Math.sqrt(dx * dx + dy * dy);\n  let velX = (dx / dist) * 5;\n  let velY = (dy / dist) * 5;\n  if (Math.abs(dx) < Math.abs(velX)) {\n    velX = dx;\n  }\n  if (Math.abs(dy) < Math.abs(velY)) {\n    velY = dy;\n  }\n  return {\n    x: (currentLoc.x -= velX),\n    y: (currentLoc.y -= velY)\n  };\n}\n\nfunction getDestination(entity, cellPath) {\n  let nextCellDestination = cellPath.shift();\n  let nextDestination = undefined;\n  if (nextCellDestination != undefined) {\n    nextDestination = entityMapLocationFromCell(\n      nextCellDestination,\n      entity.scene.map,\n      entity.asset.frameOffsets\n    );\n  }\n  return nextDestination;\n}\n\nfunction buildPathAStar(start, end) {\n  let open = new BinaryHeap(\n    a => {\n      return a.f;\n    },\n    (a, b) => {\n      return coordsEqual(a, b);\n    }\n  );\n  open.push(new GraphNode(start));\n  let closed = [];\n  while (open.size() > 0) {\n    let currentNode = open.pop();\n    closed.push(currentNode);\n    if (coordsEqual(currentNode, end)) {\n      return buildPath(currentNode);\n    }\n    let neighbors = currentNode.neighbors;\n    for (let neighbor of neighbors) {\n      if (neighbor.pathable()) {\n        let g = currentNode.g + 1;\n        let f = g + manhattenDistance(neighbor, end);\n        if (!arrayIncludesCoords(closed, neighbor)) {\n          if (!open.includes(neighbor)) {\n            neighbor.parent = currentNode;\n            neighbor.f = f;\n            open.push(neighbor);\n          }\n        } else if (neighbor.g >= g) {\n          closed = closed.filter(el => !coordsEqual(el, neighbor));\n          neighbor.parent = currentNode;\n          neighbor.f = f;\n          open.push(neighbor);\n        }\n      } else if (!arrayIncludesCoords(closed, neighbor)) {\n        closed.push(neighbor);\n      }\n    }\n  }\n  return []; // no path found\n}\n\nfunction buildPath(endNode) {\n  let path = [];\n  while (endNode.parent) {\n    path.push(endNode.cell);\n    endNode = endNode.parent;\n  }\n  return path.reverse();\n}\n\nfunction manhattenDistance(start, end) {\n  return Math.abs(start.x - end.x) + Math.abs(start.y - end.y);\n}\n\nclass GraphNode {\n  constructor(cell) {\n    this.cell = cell;\n    this.f = 0;\n    this.myNeighbors = undefined;\n    this.parent = undefined;\n  }\n  get neighbors() {\n    if (this.myNeighbors == undefined) {\n      return this.cell.neighbors.map(neighbor => {\n        return new GraphNode(neighbor);\n      });\n    }\n    return this.myNeighbors;\n  }\n  set g(newG) {\n    /* no op, g is computed from parent.g */\n  }\n  get g() {\n    return this.parent != undefined ? this.parent.g + 1 : 0;\n  }\n  get coords() {\n    return this.cell.coords;\n  }\n  get x() {\n    return this.cell.coords.x;\n  }\n  get y() {\n    return this.cell.coords.y;\n  }\n  pathable() {\n    return this.cell.pathable();\n  }\n}\n\n// CONCATENATED MODULE: ./src/scene.js\n\n\n\n\n\n\n\n\n\n\n\nconst BinarySearchTree = __webpack_require__(4).BinarySearchTree;\n\nclass scene_Scene {\n  constructor(game, sceneDef, viewport, loadCompleteCallback) {\n    this.game = game;\n    let tiles = sceneDef.mapDef.tileDefs.map(tileDef => {\n      return new tile_Tile(tileDef.imagePath, tileDef.frameSize);\n    });\n\n    this.cursorTileHighlight = undefined;\n    // @ts-ignore\n    this.drawOrderSortedEntities = new BinarySearchTree();\n    this.map = new Map(tiles, sceneDef.mapDef.mapSize);\n    this.mobiles = sceneDef.mobileDefs.map(mobileDef => {\n      return new entity_Entity(mobileDef, this, new brain_MobileBrain());\n    });\n    this.props = sceneDef.propDefs.map(propDef => {\n      return new entity_Entity(propDef, this);\n    });\n    this.tileHighlights = [];\n\n    this.viewport = viewport;\n    this.cameraOffsets = { x: 0, y: 0 };\n\n    ImageManager.loadImages([...tiles, ...this.mobiles, ...this.props], () => {\n      loadCompleteCallback();\n    });\n  }\n\n  tick(ticksElapsed) {\n    if (ticksElapsed > 0) {\n      for (let mobile of this.mobiles) {\n        mobile.tick(ticksElapsed);\n      }\n      for (let prop of this.props) {\n        prop.tick(ticksElapsed);\n      }\n    }\n  }\n\n  draw() {\n    let context = this.viewport.getContext("2d");\n    context.rect(0, 0, this.viewport.width, this.viewport.height);\n    context.fillStyle = "darkgrey";\n    context.fill();\n    context.drawImage(\n      this.map.mapCanvas,\n      this.cameraOffsets.x,\n      this.cameraOffsets.y,\n      this.viewport.width,\n      this.viewport.height,\n      0,\n      0,\n      this.viewport.width,\n      this.viewport.height\n    );\n\n    if (this.cursorTileHighlight) {\n      this.cursorTileHighlight.drawOnto(context, this.cameraOffsets);\n    }\n\n    if (this.selectedMobileTileHighlight) {\n      this.selectedMobileTileHighlight.drawOnto(context, this.cameraOffsets);\n    }\n\n    this.drawOrderSortedEntities.executeOnEveryNode(node => {\n      for (let entity of node.data) {\n        entity.drawOnto(context, this.cameraOffsets);\n      }\n    });\n  }\n\n  handleCellClick(cellTarget) {\n    if (cellTarget != undefined) {\n      let cellContents = this.map.cellAt(cellTarget).contents[0];\n      if (\n        this.mobiles.includes(cellContents) &&\n        cellContents != this.activeMobile\n      ) {\n        this.activeMobile = cellContents;\n      } else {\n        this.activeMobile.respondToMoveCommand(\n          this.map.cellAt(cellTarget),\n          () => {},\n          () => {\n            this.activateNextMobile();\n          }\n        );\n      }\n    }\n  }\n\n  addEntityToDraw(entity) {\n    this.drawOrderSortedEntities.insert(\n      entity.cellLocation.x + entity.cellLocation.y,\n      entity\n    );\n  }\n\n  removeEntityFromDraw(entity) {\n    this.drawOrderSortedEntities.delete(\n      entity.cellLocation.x + entity.cellLocation.y,\n      entity\n    );\n  }\n\n  activateNextMobile() {\n    if (\n      this.mobiles.slice(-1)[0] == this.activeMobile ||\n      this.activeMobile == undefined\n    ) {\n      this.activeMobile = this.mobiles[0];\n    } else {\n      this.activeMobile = this.mobiles[\n        this.mobiles.indexOf(this.activeMobile) + 1\n      ];\n    }\n  }\n\n  set activeMobile(newActiveMobile) {\n    this.myActiveMobile = newActiveMobile;\n    if (newActiveMobile != undefined) {\n      this.placeSelectedMobileTileHighlight(newActiveMobile.cellLocation);\n      let newOffsets = mapCoordsForCell(newActiveMobile.cellLocation, this.map);\n      newOffsets.x -= this.viewport.width / 2 - this.map.tileSize.width / 2;\n      newOffsets.y -= this.viewport.height / 2;\n      this.scrollToLocation(newOffsets);\n    }\n  }\n\n  get activeMobile() {\n    return this.myActiveMobile;\n  }\n\n  scrollToLocation(location) {\n    let scrollTrack = buildPathBrensenham(this.cameraOffsets, location);\n    this.game.changeState(\n      new game_AutoscrollingGameState(this.game, this, scrollTrack)\n    );\n  }\n\n  placeCursorTileHighlight(cellTarget) {\n    this.cursorTileHighlight = undefined;\n    if (cellTarget) {\n      this.cursorTileHighlight = new CursorHighlight(\n        mapCoordsForCell(cellTarget, this.map)\n      );\n    }\n  }\n\n  placeSelectedMobileTileHighlight(cellTarget) {\n    this.selectedMobileTileHighlight = undefined;\n    if (cellTarget) {\n      this.selectedMobileTileHighlight = new SelectedMobileTileHighlight(\n        mapCoordsForCell(cellTarget, this.map)\n      );\n    }\n  }\n\n  // Take the cursor location within the viewport and returns the location\n  // within the larger scene map.  See also getMouseEventCellLocation().\n  getMouseEventMapLocation(cursorLocation) {\n    if (cursorLocation) {\n      let rect = this.viewport.getBoundingClientRect();\n      let cursorViewportLocation = {\n        x: cursorLocation.clientX - rect.left,\n        y: cursorLocation.clientY - rect.top\n      };\n      return {\n        x: this.cameraOffsets.x + cursorViewportLocation.x,\n        y: this.cameraOffsets.y + cursorViewportLocation.y\n      };\n    }\n  }\n\n  // Requires a cursor location defined in terms of the entire map, NOT in terms\n  // of the viewport.  Use getMouseEventMapLocation() to translate from viewport\n  // location to map location.\n  getMouseEventCellLocation(cursorLocation) {\n    if (cursorLocation) {\n      let halfTileWidth = this.map.tileSize.width / 2;\n      let halfTileHeight = this.map.tileSize.height / 2;\n      let halfMapSize = this.map.mapSize / 2;\n      let fractionalCellLocation = {\n        x:\n          (cursorLocation.x / halfTileWidth +\n            cursorLocation.y / halfTileHeight) /\n            2 -\n          halfMapSize,\n        y:\n          (cursorLocation.y / halfTileHeight -\n            cursorLocation.x / halfTileWidth) /\n            2 +\n          halfMapSize\n      };\n      let cellLocation = {\n        x: Math.floor(fractionalCellLocation.x),\n        y: Math.floor(fractionalCellLocation.y)\n      };\n      if (coordsInBounds(cellLocation, this.map.mapSize)) {\n        return cellLocation;\n      } else {\n        return undefined;\n      }\n    }\n  }\n}\n\n// CONCATENATED MODULE: ./src/game.js\n\n\n\n\n\n\nlet tickLength = 50;\nlet cameraScrollSpeed = 4;\n\nclass Game {\n  constructor() {\n    let d = new Date(),\n      lastTime = d.getTime(),\n      timeRemainder = 0;\n\n    this.gameLoop = () => {\n      let d2 = new Date(),\n        currentTime = d2.getTime(),\n        timeElapsed = currentTime - lastTime;\n\n      let ticksElapsed = Math.floor((timeElapsed + timeRemainder) / tickLength);\n      if (ticksElapsed > 0) {\n        timeRemainder =\n          (timeElapsed + timeRemainder) % (ticksElapsed * tickLength);\n      } else {\n        timeRemainder += timeElapsed;\n      }\n      lastTime = currentTime;\n\n      this.gameState.handle(ticksElapsed);\n\n      requestAnimationFrame(this.gameLoop);\n    };\n\n    this.gameState = new NullGamestate();\n\n    requestAnimationFrame(this.gameLoop);\n  }\n\n  changeState(newState) {\n    this.gameState.leave();\n    newState.enter();\n    this.gameState = newState;\n  }\n}\n\nclass NullGamestate {\n  constructor(game) {\n    this.game = game;\n  }\n  handle(ticksElapsed) {}\n  enter() {}\n  leave() {}\n}\n\nclass game_LoadingSceneGamestate {\n  constructor(game, sceneDef, viewport) {\n    this.game = game;\n    this.loadComplete = false;\n    this.scene = new scene_Scene(game, sceneDef, viewport, () => {\n      this.loadComplete = true;\n    });\n  }\n  handle() {\n    if (this.loadComplete) {\n      this.game.changeState(new game_AwaitingInputGamestate(this.game, this.scene));\n      this.scene.activateNextMobile();\n    }\n  }\n  enter() {\n    document.getElementById("loading-images-message").classList.remove("hide");\n    document.getElementById("images-loaded-message").classList.add("hide");\n  }\n  leave() {\n    document.getElementById("loading-images-message").classList.add("hide");\n    document.getElementById("images-loaded-message").classList.remove("hide");\n  }\n}\n\nclass game_AwaitingInputGamestate {\n  constructor(game, scene) {\n    this.game = game;\n    this.scene = scene;\n  }\n  handle(ticksElapsed) {\n    let keys = Input.getKeys();\n    this.handleArrowScroll(keys);\n\n    let mouseActions = Input.getMouse();\n\n    if (mouseActions.mouseMove) {\n      let mouseCellLocation = this.scene.getMouseEventCellLocation(\n        this.scene.getMouseEventMapLocation(mouseActions.mouseMove)\n      );\n      this.scene.placeCursorTileHighlight(mouseCellLocation);\n    }\n\n    if (mouseActions.mouseUp) {\n      let mouseCellLocation = this.scene.getMouseEventCellLocation(\n        this.scene.getMouseEventMapLocation(mouseActions.mouseUp)\n      );\n      this.scene.handleCellClick(mouseCellLocation);\n    }\n\n    // change selected mobile on click\n\n    Input.resetInputs();\n    this.scene.tick(ticksElapsed);\n    this.scene.draw();\n  }\n  enter() {\n    if (this.scene.activeMobile) {\n      let targetCell = this.scene.activeMobile.cellLocation;\n      this.scene.placeSelectedMobileTileHighlight(targetCell);\n    }\n    // place cursor tile highlight\n  }\n  leave() {\n    // remove selected mobile highlight\n    this.scene.placeCursorTileHighlight({ x: undefined, y: undefined });\n  }\n  handleArrowScroll(keys) {\n    if (keys.includes("ArrowUp")) {\n      this.scene.cameraOffsets.y -= cameraScrollSpeed;\n    }\n    if (keys.includes("ArrowDown")) {\n      this.scene.cameraOffsets.y += cameraScrollSpeed;\n    }\n    if (keys.includes("ArrowLeft")) {\n      this.scene.cameraOffsets.x -= cameraScrollSpeed;\n    }\n    if (keys.includes("ArrowRight")) {\n      this.scene.cameraOffsets.x += cameraScrollSpeed;\n    }\n  }\n}\n\nclass game_AutoscrollingGameState {\n  constructor(game, scene, scrollTrack) {\n    this.game = game;\n    this.scene = scene;\n    this.scrollTrack = scrollTrack;\n  }\n\n  handle(ticksElapsed) {\n    if (Input.getKeys().length > 0 || this.scrollTrack.length == 0) {\n      this.game.changeState(new game_AwaitingInputGamestate(this.game, this.scene));\n      Input.resetInputs();\n    } else {\n      if (ticksElapsed > 0) {\n        let scrollDistance = lesserOf(\n          ticksElapsed * 10,\n          this.scrollTrack.length\n        );\n        this.scrollTrack = this.scrollTrack.slice(scrollDistance - 1);\n        let newLoc = this.scrollTrack.shift();\n        this.scene.cameraOffsets = newLoc;\n        this.scene.tick(ticksElapsed);\n        this.scene.draw();\n      }\n    }\n  }\n  enter() {}\n  leave() {}\n}\nclass game_AnimatingMobileGameState {\n  constructor(game, scene) {\n    this.game = game;\n    this.scene = scene;\n  }\n\n  tick(ticksElapsed) {\n    this.scene.tick(ticksElapsed);\n    this.scene.draw();\n    // change camera offsets for manual scroll(?)\n    // mobile move completed?\n  }\n  handleInputs() {\n    let keyInputs = Input.getKeys();\n    let mouseInputs = Input.getMouse();\n    // handle arrow push -> manual scroll (within state or create ManualScrolling state?)\n    // handle mouse movement -> no op\n    // handle mouse click -> no op\n  }\n  enter() {}\n  exit() {}\n}\n\n// CONCATENATED MODULE: ./src/scene_definition.js\n\n\nconst scene_definition_sceneDef = {\n  mapDef: {\n    mapSize: 10,\n    tileDefs: [\n      {\n        imagePath: "./src/img/ground_tiles/brickpavers2.png",\n        frameSize: { x: 512, y: 256 }\n      },\n      {\n        imagePath: "./src/img/ground_tiles/concrete368a.png",\n        frameSize: { x: 256, y: 128 }\n      },\n      {\n        imagePath: "./src/img/ground_tiles/cretebrick970.png",\n        frameSize: { x: 512, y: 256 }\n      },\n      {\n        imagePath: "./src/img/ground_tiles/dirt.png",\n        frameSize: { x: 256, y: 128 }\n      },\n      {\n        imagePath: "./src/img/ground_tiles/dirtsand2.png",\n        frameSize: { x: 512, y: 256 }\n      },\n      {\n        imagePath: "./src/img/ground_tiles/rock.png",\n        frameSize: { x: 256, y: 128 }\n      },\n      {\n        imagePath: "./src/img/ground_tiles/snow.png",\n        frameSize: { x: 256, y: 128 }\n      },\n      {\n        imagePath: "./src/img/ground_tiles/stone.png",\n        frameSize: { x: 512, y: 256 }\n      }\n    ]\n  },\n  mobileDefs: [\n    {\n      imagePath: "./src/img/mobiles/8way_mobile.png",\n      startCell: { x: 3, y: 3 },\n      frameSize: { width: 60, height: 110 },\n      frameOffsets: { x: 30, y: 100 }\n    },\n    {\n      imagePath: "./src/img/mobiles/8way_mobile.png",\n      startCell: { x: 5, y: 4 },\n      frameSize: { width: 60, height: 110 },\n      frameOffsets: { x: 30, y: 100 }\n    },\n    {\n      imagePath: "./src/img/mobiles/8way_mobile.png",\n      startCell: { x: 3, y: 6 },\n      frameSize: { width: 60, height: 110 },\n      frameOffsets: { x: 30, y: 100 }\n    }\n  ],\n  propDefs: [\n    {\n      imagePath: "./src/img/props/statue1-01.png",\n      startCell: { x: 5, y: 5 },\n      frameSize: { width: 128, height: 128 },\n      frameOffsets: { x: 64, y: 112 }\n    },\n    {\n      imagePath: "./src/img/props/statue1-02.png",\n      startCell: { x: 0, y: 3 },\n      frameSize: { width: 128, height: 128 },\n      frameOffsets: { x: 64, y: 112 }\n    },\n    {\n      imagePath: "./src/img/props/statue1-03.png",\n      startCell: { x: 4, y: 1 },\n      frameSize: { width: 128, height: 128 },\n      frameOffsets: { x: 64, y: 112 }\n    },\n    {\n      imagePath: "./src/img/props/statue1-04.png",\n      startCell: { x: 5, y: 1 },\n      frameSize: { width: 128, height: 128 },\n      frameOffsets: { x: 64, y: 112 }\n    },\n    {\n      imagePath: "./src/img/props/statue1-02.png",\n      startCell: { x: 6, y: 0 },\n      frameSize: { width: 128, height: 128 },\n      frameOffsets: { x: 64, y: 112 }\n    },\n    {\n      imagePath: "./src/img/props/statue1-03.png",\n      startCell: { x: 7, y: 9 },\n      frameSize: { width: 128, height: 128 },\n      frameOffsets: { x: 64, y: 112 }\n    }\n  ]\n};\n\n// CONCATENATED MODULE: ./src/index.js\n\n\n\n\n\n\n\n\n\ndocument.addEventListener("DOMContentLoaded", function() {\n  console.log("Proxima Reverie approaches!");\n\n  var viewport = document.getElementById("viewport-canvas");\n  let viewportDimensions = { x: 600, y: 400 };\n  // @ts-ignore\n  viewport.width = viewportDimensions.x;\n  // @ts-ignore\n  viewport.height = viewportDimensions.y;\n\n  let game = new Game();\n  game.changeState(new game_LoadingSceneGamestate(game, scene_definition_sceneDef, viewport));\n\n  document.addEventListener("keydown", event => {\n    Input.keyDown(event.key);\n  });\n\n  document.addEventListener("keyup", event => {\n    Input.keyUp(event.key);\n  });\n\n  viewport.addEventListener("mouseup", event => {\n    Input.mouseUp(event);\n  });\n\n  viewport.addEventListener(\n    "mousemove",\n    throttle(event => {\n      Input.mouseMove(event);\n    }, 20)\n  );\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///11\n')}]);